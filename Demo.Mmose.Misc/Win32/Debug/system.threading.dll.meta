Assembly System.Threading, Version=1.0.2856.102, Culture=neutral, PublicKeyToken=31bf3856ad364e35: 
	hash=SHA1, flags=PublicKey
Assembly mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Assembly System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Assembly System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=SHA1, flags=None
Class System.Diagnostics.Contracts.Contract: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    Assert(Boolean): PrivateScope, Assembly, Static, HideBySig
    Assert(Boolean, String): PrivateScope, Assembly, Static, HideBySig
    Ensures(Boolean): PrivateScope, Assembly, Static, HideBySig
    EndContractBlock(): PrivateScope, Assembly, Static, HideBySig
Class System.Environment2: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    GetResourceString(String): PrivateScope, Assembly, Static, HideBySig
Interface System.Threading.Tasks.IThreadPoolWorkItem: AutoLayout, AnsiClass, Class, ClassSemanticsMask, Abstract
  Methods:
    ExecuteWorkItem(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    MarkAborted(ThreadAbortException): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class System.Threading.Monitor2: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    Enter(Object, Boolean&): PrivateScope, Assembly, Static, HideBySig
    TryEnter(Object): PrivateScope, Assembly, Static, HideBySig
    TryEnter(Object, Boolean&): PrivateScope, Assembly, Static, HideBySig
    TryEnter(Object, Int32): PrivateScope, Assembly, Static, HideBySig
    TryEnter(Object, TimeSpan): PrivateScope, Assembly, Static, HideBySig
    TryEnter(Object, Int32, Boolean&): PrivateScope, Assembly, Static, HideBySig
Class System.Collections.Generic.Mscorlib_DictionaryDebugView`2[K,V]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: K
  Type parameter: V
    Void .ctor(System.Collections.Generic.IDictionary`2[K,V]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Collections.Generic.KeyValuePair`2[K,V][] Items 'get ' : 
  Methods:
    get_Items(): PrivateScope, Assembly, HideBySig, SpecialName
Class System.OperationCanceledException2: AutoLayout, AnsiClass, Class, Serializable, BeforeFieldInit
  :System.OperationCanceledException
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception, System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.CancellationToken CancellationToken 'get set' : 
  Methods:
    get_CancellationToken(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Platform: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Properties:
    Int32 ProcessorCount 'get ' : 
    Boolean IsSingleProcessor 'get ' : 
  Methods:
    get_ProcessorCount(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    get_IsSingleProcessor(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    Yield(): PrivateScope, Assembly, Static, HideBySig
Class System.SecuritySafeCriticalAttribute: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Attribute
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Struct System.Threading.StackCrawlMark2: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
  Properties:
    System.Threading.StackCrawlMark2 LookForMyCaller 'get ' : 
  Methods:
    get_LookForMyCaller(): PrivateScope, Assembly, Static, HideBySig, SpecialName
Class System.Collections.Concurrent.ConcurrentDictionary`2[TKey,TValue]: AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
  Type parameter: TKey
  Type parameter: TValue
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]], System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]], System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, Int32, System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IDictionary`2[TKey,TValue]
    System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]
    System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]
    System.Collections.IEnumerable
    System.Collections.IDictionary
    System.Collections.ICollection
  Properties:
    TValue Item [TKey] 'get set' : 
    Int32 Count 'get ' : 
    Boolean IsEmpty 'get ' : 
    System.Collections.Generic.ICollection`1[TKey] Keys 'get ' : 
    System.Collections.Generic.ICollection`1[TValue] Values 'get ' : 
  Methods:
    TryAdd(TKey, TValue): PrivateScope, Public, HideBySig
    ContainsKey(TKey): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    TryRemove(TKey, TValue&(Out)): PrivateScope, Public, HideBySig
    TryGetValue(TKey, TValue&(Out)): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    TryUpdate(TKey, TValue, TValue): PrivateScope, Public, HideBySig
    Clear(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    ToArray(): PrivateScope, Public, HideBySig
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    get_Item(TKey): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    set_Item(TKey, TValue): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    GetOrAdd(TKey, Func`2): PrivateScope, Public, HideBySig
    GetOrAdd(TKey, TValue): PrivateScope, Public, HideBySig
    AddOrUpdate(TKey, Func`2, Func`3): PrivateScope, Public, HideBySig
    AddOrUpdate(TKey, TValue, Func`3): PrivateScope, Public, HideBySig
    get_IsEmpty(): PrivateScope, Public, HideBySig, SpecialName
    get_Keys(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_Values(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
Interface System.Collections.Concurrent.IProducerConsumerCollection`1[T]: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract
  Type parameter: T
  Interfaces:
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
    System.Collections.ICollection
  Methods:
    CopyTo(T[], Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    TryAdd(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    TryTake(T&(Out)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    ToArray(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class System.Collections.Concurrent.ConcurrentQueue`1[T]: AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Concurrent.IProducerConsumerCollection`1[T]
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
    System.Collections.ICollection
  Properties:
    Boolean IsEmpty 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    get_IsEmpty(): PrivateScope, Public, HideBySig, SpecialName
    ToArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    CopyTo(T[], Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Enqueue(T): PrivateScope, Public, HideBySig
    TryDequeue(T&(Out)): PrivateScope, Public, HideBySig
    TryPeek(T&(Out)): PrivateScope, Public, HideBySig
Class System.Collections.Concurrent.ConcurrentStack`1[T]: AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Concurrent.IProducerConsumerCollection`1[T]
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
    System.Collections.ICollection
  Properties:
    Boolean IsEmpty 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    get_IsEmpty(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Clear(): PrivateScope, Public, HideBySig
    CopyTo(T[], Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Push(T): PrivateScope, Public, HideBySig
    PushRange(T[]): PrivateScope, Public, HideBySig
    PushRange(T[], Int32, Int32): PrivateScope, Public, HideBySig
    TryPeek(T&(Out)): PrivateScope, Public, HideBySig
    TryPop(T&(Out)): PrivateScope, Public, HideBySig
    TryPopRange(T[]): PrivateScope, Public, HideBySig
    TryPopRange(T[], Int32, Int32): PrivateScope, Public, HideBySig
    ToArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Collections.Concurrent.IProducerConsumerCollection`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    T[] Items  'get ' : 
  Methods:
    get_Items(): PrivateScope, Public, HideBySig, SpecialName
Class System.Collections.Concurrent.Partitioner`1[TSource]: AutoLayout, AnsiClass, Class, Public, Abstract, HasSecurity, BeforeFieldInit
  Type parameter: TSource
  Properties:
    Boolean SupportsDynamicPartitions 'get ' : 
  Methods:
    GetPartitions(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_SupportsDynamicPartitions(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    GetDynamicPartitions(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class System.Collections.Concurrent.OrderablePartitioner`1[TSource]: AutoLayout, AnsiClass, Class, Public, Abstract, HasSecurity, BeforeFieldInit
  Type parameter: TSource
  :System.Collections.Concurrent.Partitioner`1[TSource]
  Properties:
    Boolean KeysOrderedInEachPartition 'get set' : 
    Boolean KeysOrderedAcrossPartitions 'get set' : 
    Boolean KeysNormalized 'get set' : 
  Methods:
    GetOrderablePartitions(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    GetOrderableDynamicPartitions(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    get_KeysOrderedInEachPartition(): PrivateScope, Public, HideBySig, SpecialName
    get_KeysOrderedAcrossPartitions(): PrivateScope, Public, HideBySig, SpecialName
    get_KeysNormalized(): PrivateScope, Public, HideBySig, SpecialName
    GetPartitions(Int32): PrivateScope, Public, Virtual, HideBySig
    GetDynamicPartitions(): PrivateScope, Public, Virtual, HideBySig
Class System.Collections.Concurrent.Partitioner: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, HasSecurity, BeforeFieldInit
  Methods:
    Create(IList`1, Boolean): PrivateScope, Public, Static, HideBySig
    Create(TSource[], Boolean): PrivateScope, Public, Static, HideBySig
    Create(IEnumerable`1): PrivateScope, Public, Static, HideBySig
    Create(IEnumerable`1, Int32): PrivateScope, Assembly, Static, HideBySig
Class System.AggregateException: AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
  :System.Exception
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Exception]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Exception[]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Collections.Generic.IEnumerable`1[System.Exception]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception[]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Collections.ObjectModel.ReadOnlyCollection`1[System.Exception] InnerExceptions 'get ' : 
  Methods:
    GetObjectData(SerializationInfo, StreamingContext): PrivateScope, Public, Virtual, HideBySig
    GetBaseException(): PrivateScope, Public, Virtual, HideBySig
    get_InnerExceptions(): PrivateScope, Public, HideBySig, SpecialName
    Handle(Func`2): PrivateScope, Public, HideBySig
    Flatten(): PrivateScope, Public, HideBySig
    ToString(): PrivateScope, Public, Virtual, HideBySig
Class System.Func_`6[T1,T2,T3,T4,T5,TResult]: AutoLayout, AnsiClass, Class, Public, Sealed
  Type parameter: T1
  Type parameter: T2
  Type parameter: T3
  Type parameter: T4
  Type parameter: T5
  Type parameter: TResult
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    Invoke(T1, T2, T3, T4, T5): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    BeginInvoke(T1, T2, T3, T4, T5, AsyncCallback, Object): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Struct System.Threading.CancellationToken: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
  :System.ValueType
    Void .ctor(System.Threading.CancellationTokenSource): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.CancellationToken None 'get ' : 
    Boolean IsCancellationRequested 'get ' : 
    Boolean CanBeCanceled 'get ' : 
    System.Threading.WaitHandle WaitHandle 'get ' : 
  Methods:
    get_None(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_IsCancellationRequested(): PrivateScope, Public, HideBySig, SpecialName
    get_CanBeCanceled(): PrivateScope, Public, HideBySig, SpecialName
    get_WaitHandle(): PrivateScope, Public, HideBySig, SpecialName
    Register(Action): PrivateScope, Public, HideBySig
    Register(Action, Boolean): PrivateScope, Public, HideBySig
    Register(Action`1, Object): PrivateScope, Public, HideBySig
    Register(Action`1, Object, Boolean): PrivateScope, Public, HideBySig
    InternalRegisterWithoutEC(Action`1, Object): PrivateScope, Assembly, HideBySig
    Equals(CancellationToken): PrivateScope, Public, HideBySig
    Equals(Object): PrivateScope, Public, Virtual, HideBySig
    GetHashCode(): PrivateScope, Public, Virtual, HideBySig
    op_Equality(CancellationToken, CancellationToken): PrivateScope, Public, Static, HideBySig, SpecialName
    op_Inequality(CancellationToken, CancellationToken): PrivateScope, Public, Static, HideBySig, SpecialName
    ThrowIfCancellationRequested(): PrivateScope, Public, HideBySig
    ThrowIfSourceDisposed(): PrivateScope, Assembly, HideBySig
Struct System.Threading.CancellationTokenRegistration: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
  :System.ValueType
    Void .ctor(System.Threading.CancellationTokenSource, System.Threading.CancellationCallbackInfo, System.Threading.SparselyPopulatedArrayAddInfo`1[System.Threading.CancellationCallbackInfo]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IEquatable`1[System.Threading.CancellationTokenRegistration]
    System.IDisposable
  Methods:
    TryDeregister(): PrivateScope, Assembly, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    op_Equality(CancellationTokenRegistration, CancellationTokenRegistration): PrivateScope, Public, Static, HideBySig, SpecialName
    op_Inequality(CancellationTokenRegistration, CancellationTokenRegistration): PrivateScope, Public, Static, HideBySig, SpecialName
    Equals(Object): PrivateScope, Public, Virtual, HideBySig
    Equals(CancellationTokenRegistration): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetHashCode(): PrivateScope, Public, Virtual, HideBySig
Class System.Threading.CancellationTokenSource: AutoLayout, AnsiClass, Class, Public, Sealed, HasSecurity, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsCancellationRequested 'get ' : 
    Boolean IsCancellationCompleted 'get ' : 
    Boolean IsDisposed 'get ' : 
    Int32 ThreadIDExecutingCallbacks 'get set' : 
    System.Threading.CancellationToken Token 'get ' : 
    Boolean CanBeCanceled 'get ' : 
    System.Threading.WaitHandle WaitHandle 'get ' : 
    System.Threading.CancellationCallbackInfo ExecutingCallback 'get ' : 
  Methods:
    get_IsCancellationRequested(): PrivateScope, Public, HideBySig, SpecialName
    get_IsCancellationCompleted(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Assembly, HideBySig, SpecialName
    set_ThreadIDExecutingCallbacks(Int32): PrivateScope, Assembly, HideBySig, SpecialName
    get_ThreadIDExecutingCallbacks(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Token(): PrivateScope, Public, HideBySig, SpecialName
    get_CanBeCanceled(): PrivateScope, Assembly, HideBySig, SpecialName
    get_WaitHandle(): PrivateScope, Assembly, HideBySig, SpecialName
    get_ExecutingCallback(): PrivateScope, Assembly, HideBySig, SpecialName
    Cancel(): PrivateScope, Public, HideBySig
    Cancel(Boolean): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    ThrowIfDisposed(): PrivateScope, Assembly, HideBySig
    InternalGetStaticSource(Boolean): PrivateScope, Assembly, Static, HideBySig
    InternalRegister(Action`1, Object, SynchronizationContext, ExecutionContext): PrivateScope, Assembly, HideBySig
    CreateLinkedTokenSource(CancellationToken, CancellationToken): PrivateScope, Public, Static, HideBySig
    CreateLinkedTokenSource(CancellationToken[]): PrivateScope, Public, Static, HideBySig
    WaitForCallbackToComplete(CancellationCallbackInfo): PrivateScope, Assembly, HideBySig
Struct System.Threading.CancellationCallbackCoreWorkArguments: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
    Void .ctor(System.Threading.SparselyPopulatedArrayFragment`1[System.Threading.CancellationCallbackInfo], Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Threading.SparselyPopulatedArrayFragment`1[System.Threading.CancellationCallbackInfo] m_currArrayFragment : Assembly
    Int32 m_currArrayIndex : Assembly
Class System.Threading.CancellationCallbackInfo: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(System.Action`1[System.Object], System.Object, System.Threading.SynchronizationContext, System.Threading.ExecutionContext, System.Threading.CancellationTokenSource): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Action`1[System.Object] Callback : Assembly, InitOnly
    System.Object StateForCallback : Assembly, InitOnly
    System.Threading.SynchronizationContext TargetSyncContext : Assembly, InitOnly
    System.Threading.ExecutionContext TargetExecutionContext : Assembly, InitOnly
    System.Threading.CancellationTokenSource CancellationTokenSource : Assembly, InitOnly
  Methods:
    ExecuteCallback(): PrivateScope, Assembly, HideBySig
Class System.Threading.SparselyPopulatedArray`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T,  ReferenceType
    Void .ctor(Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.SparselyPopulatedArrayFragment`1[T] Head 'get ' : 
    System.Threading.SparselyPopulatedArrayFragment`1[T] Tail 'get ' : 
  Methods:
    get_Head(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Tail(): PrivateScope, Assembly, HideBySig, SpecialName
    Add(T): PrivateScope, Assembly, HideBySig
Struct System.Threading.SparselyPopulatedArrayAddInfo`1[T]: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: T,  ReferenceType
  :System.ValueType
    Void .ctor(System.Threading.SparselyPopulatedArrayFragment`1[T], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.SparselyPopulatedArrayFragment`1[T] Source 'get ' : 
    Int32 Index 'get ' : 
  Methods:
    get_Source(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Index(): PrivateScope, Assembly, HideBySig, SpecialName
Class System.Threading.SparselyPopulatedArrayFragment`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T,  ReferenceType
    Void .ctor(Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, System.Threading.SparselyPopulatedArrayFragment`1[T]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    T[] m_elements : Assembly, InitOnly
    Int32 m_freeCount IsVolatile : Assembly
    System.Threading.SparselyPopulatedArrayFragment`1[T] m_next IsVolatile : Assembly
    System.Threading.SparselyPopulatedArrayFragment`1[T] m_prev IsVolatile : Assembly
  Properties:
    T Item [Int32] 'get ' : 
    Int32 Length 'get ' : 
    System.Threading.SparselyPopulatedArrayFragment`1[T] Next 'get ' : 
    System.Threading.SparselyPopulatedArrayFragment`1[T] Prev 'get ' : 
  Methods:
    get_Item(Int32): PrivateScope, Assembly, HideBySig, SpecialName
    get_Length(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Next(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Prev(): PrivateScope, Assembly, HideBySig, SpecialName
    SafeAtomicRemove(Int32, T): PrivateScope, Assembly, HideBySig
Class System.Threading.CountdownEvent: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 CurrentCount 'get ' : 
    Int32 InitialCount 'get ' : 
    Boolean IsSet 'get ' : 
    System.Threading.WaitHandle WaitHandle 'get ' : 
  Methods:
    get_CurrentCount(): PrivateScope, Public, HideBySig, SpecialName
    get_InitialCount(): PrivateScope, Public, HideBySig, SpecialName
    get_IsSet(): PrivateScope, Public, HideBySig, SpecialName
    get_WaitHandle(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Signal(): PrivateScope, Public, HideBySig
    Signal(Int32): PrivateScope, Public, HideBySig
    AddCount(): PrivateScope, Public, HideBySig
    TryAddCount(): PrivateScope, Public, HideBySig
    AddCount(Int32): PrivateScope, Public, HideBySig
    TryAddCount(Int32): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
    Reset(Int32): PrivateScope, Public, HideBySig
    Wait(): PrivateScope, Public, HideBySig
    Wait(CancellationToken): PrivateScope, Public, HideBySig
    Wait(TimeSpan): PrivateScope, Public, HideBySig
    Wait(TimeSpan, CancellationToken): PrivateScope, Public, HideBySig
    Wait(Int32): PrivateScope, Public, HideBySig
    Wait(Int32, CancellationToken): PrivateScope, Public, HideBySig
Class System.Threading.ManualResetEventSlim: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    System.Threading.WaitHandle WaitHandle 'get ' : 
    Boolean IsSet 'get set' : 
    Int32 SpinCount 'get set' : 
  Methods:
    get_WaitHandle(): PrivateScope, Public, HideBySig, SpecialName
    get_IsSet(): PrivateScope, Public, HideBySig, SpecialName
    get_SpinCount(): PrivateScope, Public, HideBySig, SpecialName
    Set(): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
    Wait(): PrivateScope, Public, HideBySig
    Wait(CancellationToken): PrivateScope, Public, HideBySig
    Wait(TimeSpan): PrivateScope, Public, HideBySig
    Wait(TimeSpan, CancellationToken): PrivateScope, Public, HideBySig
    Wait(Int32): PrivateScope, Public, HideBySig
    Wait(Int32, CancellationToken): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Lazy`1[T]: AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.LazyThreadSafetyMode): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[T], Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[T], System.Threading.LazyThreadSafetyMode): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    T ValueForDebugDisplay 'get ' : 
    System.Threading.LazyThreadSafetyMode Mode 'get ' : 
    Boolean IsValueFaulted 'get ' : 
    Boolean IsValueCreated 'get ' : 
    T Value    'get ' : 
  Methods:
    ToString(): PrivateScope, Public, Virtual, HideBySig
    get_ValueForDebugDisplay(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Mode(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsValueFaulted(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsValueCreated(): PrivateScope, Public, HideBySig, SpecialName
    get_Value(): PrivateScope, Public, HideBySig, SpecialName
Class System.System_LazyDebugView`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Lazy`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean IsValueCreated 'get ' : 
    T Value    'get ' : 
    System.Threading.LazyThreadSafetyMode Mode 'get ' : 
    Boolean IsValueFaulted 'get ' : 
  Methods:
    get_IsValueCreated(): PrivateScope, Public, HideBySig, SpecialName
    get_Value(): PrivateScope, Public, HideBySig, SpecialName
    get_Mode(): PrivateScope, Public, HideBySig, SpecialName
    get_IsValueFaulted(): PrivateScope, Public, HideBySig, SpecialName
Struct System.Threading.LazyThreadSafetyMode: AutoLayout, AnsiClass, Class, Public, Sealed
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Threading.LazyThreadSafetyMode None = 0 : Public, Static, Literal, HasDefault
    System.Threading.LazyThreadSafetyMode PublicationOnly = 1 : Public, Static, Literal, HasDefault
    System.Threading.LazyThreadSafetyMode ExecutionAndPublication = 2 : Public, Static, Literal, HasDefault
Class System.Threading.LazyInitializer: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, HasSecurity, BeforeFieldInit
  Methods:
    EnsureInitialized(T&): PrivateScope, Public, Static, HideBySig
    EnsureInitialized(T&, Func`1): PrivateScope, Public, Static, HideBySig
    EnsureInitialized(T&, Boolean&, Object&): PrivateScope, Public, Static, HideBySig
    EnsureInitialized(T&, Boolean&, Object&, Func`1): PrivateScope, Public, Static, HideBySig
Class System.Threading.ThreadLocalGlobalCounter: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Fields:
    Int32 s_fastPathCount IsVolatile : Assembly, Static
    Int32 MAXIMUM_GLOBAL_COUNT : Assembly, Static
Class System.Threading.ThreadLocal`1[T]: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Fields:
    Int32 MAXIMUM_TYPES_LENGTH : Assembly, Static
  Properties:
    T Value    'get set' : 
    Boolean IsValueCreated 'get ' : 
    T ValueForDebugDisplay 'get ' : 
  Methods:
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    ToString(): PrivateScope, Public, Virtual, HideBySig
    get_Value(): PrivateScope, Public, HideBySig, SpecialName
    set_Value(T): PrivateScope, Public, HideBySig, SpecialName
    get_IsValueCreated(): PrivateScope, Public, HideBySig, SpecialName
    get_ValueForDebugDisplay(): PrivateScope, Assembly, HideBySig, SpecialName
Class System.Threading.SystemThreading_ThreadLocalDebugView`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Threading.ThreadLocal`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean IsValueCreated 'get ' : 
    T Value    'get ' : 
  Methods:
    get_IsValueCreated(): PrivateScope, Public, HideBySig, SpecialName
    get_Value(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.SemaphoreSlim: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 CurrentCount 'get ' : 
    System.Threading.WaitHandle AvailableWaitHandle 'get ' : 
  Methods:
    get_CurrentCount(): PrivateScope, Public, HideBySig, SpecialName
    get_AvailableWaitHandle(): PrivateScope, Public, HideBySig, SpecialName
    Wait(): PrivateScope, Public, HideBySig
    Wait(CancellationToken): PrivateScope, Public, HideBySig
    Wait(TimeSpan): PrivateScope, Public, HideBySig
    Wait(TimeSpan, CancellationToken): PrivateScope, Public, HideBySig
    Wait(Int32): PrivateScope, Public, HideBySig
    Wait(Int32, CancellationToken): PrivateScope, Public, HideBySig
    Release(): PrivateScope, Public, HideBySig
    Release(Int32): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Struct System.Threading.SpinWait: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
  :System.ValueType
  Fields:
    Int32 YIELD_THRESHOLD = 10 : Assembly, Static, Literal, HasDefault
    Int32 SLEEP_0_EVERY_HOW_MANY_TIMES = 5 : Assembly, Static, Literal, HasDefault
    Int32 SLEEP_1_EVERY_HOW_MANY_TIMES = 20 : Assembly, Static, Literal, HasDefault
  Properties:
    Int32 Count 'get ' : 
    Boolean NextSpinWillYield 'get ' : 
  Methods:
    get_Count(): PrivateScope, Public, HideBySig, SpecialName
    get_NextSpinWillYield(): PrivateScope, Public, HideBySig, SpecialName
    SpinOnce(): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
    SpinUntil(Func`1): PrivateScope, Public, Static, HideBySig
    SpinUntil(Func`1, TimeSpan): PrivateScope, Public, Static, HideBySig
    SpinUntil(Func`1, Int32): PrivateScope, Public, Static, HideBySig
Class System.Threading.PlatformHelper: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Properties:
    Int32 ProcessorCount 'get ' : 
    Boolean IsSingleProcessor 'get ' : 
  Methods:
    get_ProcessorCount(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    get_IsSingleProcessor(): PrivateScope, Assembly, Static, HideBySig, SpecialName
Struct System.Threading.SpinLock: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, HasSecurity, BeforeFieldInit
  :System.ValueType
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean IsHeld 'get ' : 
    Boolean IsHeldByCurrentThread 'get ' : 
    Boolean IsThreadOwnerTrackingEnabled 'get ' : 
  Methods:
    Enter(Boolean&): PrivateScope, Public, HideBySig
    TryEnter(Boolean&): PrivateScope, Public, HideBySig
    TryEnter(TimeSpan, Boolean&): PrivateScope, Public, HideBySig
    TryEnter(Int32, Boolean&): PrivateScope, Public, HideBySig
    Exit(): PrivateScope, Public, HideBySig
    Exit(Boolean): PrivateScope, Public, HideBySig
    get_IsHeld(): PrivateScope, Public, HideBySig, SpecialName
    get_IsHeldByCurrentThread(): PrivateScope, Public, HideBySig, SpecialName
    get_IsThreadOwnerTrackingEnabled(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.SpinLock+SystemThreading_SpinLockDebugView: AutoLayout, AnsiClass, Class, NestedAssembly, BeforeFieldInit
    Void .ctor(System.Threading.SpinLock): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Nullable`1[System.Boolean] IsHeldByCurrentThread 'get ' : 
    System.Nullable`1[System.Int32] OwnerThreadID 'get ' : 
    Boolean IsHeld 'get ' : 
  Methods:
    get_IsHeldByCurrentThread(): PrivateScope, Public, HideBySig, SpecialName
    get_OwnerThreadID(): PrivateScope, Public, HideBySig, SpecialName
    get_IsHeld(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.ParallelOptions: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.Tasks.TaskScheduler TaskScheduler 'get set' : 
    System.Threading.Tasks.TaskScheduler EffectiveTaskScheduler 'get ' : 
    Int32 MaxDegreeOfParallelism 'get set' : 
    System.Threading.CancellationToken CancellationToken 'get set' : 
    Int32 EffectiveMaxConcurrencyLevel 'get ' : 
  Methods:
    get_TaskScheduler(): PrivateScope, Public, HideBySig, SpecialName
    set_TaskScheduler(TaskScheduler): PrivateScope, Public, HideBySig, SpecialName
    get_EffectiveTaskScheduler(): PrivateScope, Assembly, HideBySig, SpecialName
    get_MaxDegreeOfParallelism(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxDegreeOfParallelism(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_CancellationToken(): PrivateScope, Public, HideBySig, SpecialName
    set_CancellationToken(CancellationToken): PrivateScope, Public, HideBySig, SpecialName
    get_EffectiveMaxConcurrencyLevel(): PrivateScope, Assembly, HideBySig, SpecialName
Class System.Threading.Tasks.Parallel: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, HasSecurity, BeforeFieldInit
  Fields:
    System.Threading.Tasks.ParallelOptions s_defaultParallelOptions : Assembly, Static
    Int32 DEFAULT_LOOP_STRIDE = 16 : Assembly, Static, Literal, HasDefault
  Methods:
    Invoke(Action[]): PrivateScope, Public, Static, HideBySig
    Invoke(ParallelOptions, Action[]): PrivateScope, Public, Static, HideBySig
    For(Int32, Int32, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int64, Int64, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int32, Int32, ParallelOptions, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int64, Int64, ParallelOptions, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int32, Int32, Action`2): PrivateScope, Public, Static, HideBySig
    For(Int64, Int64, Action`2): PrivateScope, Public, Static, HideBySig
    For(Int32, Int32, ParallelOptions, Action`2): PrivateScope, Public, Static, HideBySig
    For(Int64, Int64, ParallelOptions, Action`2): PrivateScope, Public, Static, HideBySig
    For(Int32, Int32, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int64, Int64, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int32, Int32, ParallelOptions, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    For(Int64, Int64, ParallelOptions, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, ParallelOptions, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, Action`2): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, ParallelOptions, Action`2): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, Action`3): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, ParallelOptions, Action`3): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, ParallelOptions, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, Func`1, Func`5, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(IEnumerable`1, ParallelOptions, Func`1, Func`5, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(Partitioner`1, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(Partitioner`1, Action`2): PrivateScope, Public, Static, HideBySig
    ForEach(OrderablePartitioner`1, Action`3): PrivateScope, Public, Static, HideBySig
    ForEach(Partitioner`1, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(OrderablePartitioner`1, Func`1, Func`5, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(Partitioner`1, ParallelOptions, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(Partitioner`1, ParallelOptions, Action`2): PrivateScope, Public, Static, HideBySig
    ForEach(OrderablePartitioner`1, ParallelOptions, Action`3): PrivateScope, Public, Static, HideBySig
    ForEach(Partitioner`1, ParallelOptions, Func`1, Func`4, Action`1): PrivateScope, Public, Static, HideBySig
    ForEach(OrderablePartitioner`1, ParallelOptions, Func`1, Func`5, Action`1): PrivateScope, Public, Static, HideBySig
    ThrowIfReducableToSingleOCE(IEnumerable`1, CancellationToken): PrivateScope, Assembly, Static, HideBySig
Struct System.Threading.Tasks.Parallel+LoopTimer: AutoLayout, AnsiClass, Class, NestedAssembly, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    LimitExceeded(): PrivateScope, Public, HideBySig
Class System.Threading.Tasks.ParallelLoopState: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
    Void .ctor(System.Threading.Tasks.ParallelLoopStateFlags): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean InternalShouldExitCurrentIteration 'get ' : 
    Boolean ShouldExitCurrentIteration 'get ' : 
    Boolean IsStopped 'get ' : 
    Boolean IsExceptional 'get ' : 
    System.Nullable`1[System.Int64] InternalLowestBreakIteration 'get ' : 
    System.Nullable`1[System.Int64] LowestBreakIteration 'get ' : 
  Methods:
    get_InternalShouldExitCurrentIteration(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_ShouldExitCurrentIteration(): PrivateScope, Public, HideBySig, SpecialName
    get_IsStopped(): PrivateScope, Public, HideBySig, SpecialName
    get_IsExceptional(): PrivateScope, Public, HideBySig, SpecialName
    get_InternalLowestBreakIteration(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_LowestBreakIteration(): PrivateScope, Public, HideBySig, SpecialName
    Stop(): PrivateScope, Public, HideBySig
    InternalBreak(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    Break(): PrivateScope, Public, HideBySig
    Break(Int32, ParallelLoopStateFlags32): PrivateScope, Assembly, Static, HideBySig
    Break(Int64, ParallelLoopStateFlags64): PrivateScope, Assembly, Static, HideBySig
Class System.Threading.Tasks.ParallelLoopState32: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Threading.Tasks.ParallelLoopState
    Void .ctor(System.Threading.Tasks.ParallelLoopStateFlags32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 CurrentIteration 'get set' : 
    Boolean InternalShouldExitCurrentIteration 'get ' : 
    System.Nullable`1[System.Int64] InternalLowestBreakIteration 'get ' : 
  Methods:
    get_CurrentIteration(): PrivateScope, Assembly, HideBySig, SpecialName
    set_CurrentIteration(Int32): PrivateScope, Assembly, HideBySig, SpecialName
    get_InternalShouldExitCurrentIteration(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_InternalLowestBreakIteration(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    InternalBreak(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Threading.Tasks.ParallelLoopState64: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Threading.Tasks.ParallelLoopState
    Void .ctor(System.Threading.Tasks.ParallelLoopStateFlags64): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int64 CurrentIteration 'get set' : 
    Boolean InternalShouldExitCurrentIteration 'get ' : 
    System.Nullable`1[System.Int64] InternalLowestBreakIteration 'get ' : 
  Methods:
    get_CurrentIteration(): PrivateScope, Assembly, HideBySig, SpecialName
    set_CurrentIteration(Int64): PrivateScope, Assembly, HideBySig, SpecialName
    get_InternalShouldExitCurrentIteration(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_InternalLowestBreakIteration(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    InternalBreak(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Threading.Tasks.ParallelLoopStateFlags: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Int32 PLS_NONE : Assembly, Static
    Int32 PLS_EXCEPTIONAL : Assembly, Static
    Int32 PLS_BROKEN : Assembly, Static
    Int32 PLS_STOPPED : Assembly, Static
    Int32 PLS_CANCELED : Assembly, Static
  Properties:
    Int32 LoopStateFlags 'get ' : 
  Methods:
    get_LoopStateFlags(): PrivateScope, Assembly, HideBySig, SpecialName
    AtomicLoopStateUpdate(Int32, Int32): PrivateScope, Assembly, HideBySig
    AtomicLoopStateUpdate(Int32, Int32, Int32&): PrivateScope, Assembly, HideBySig
    SetExceptional(): PrivateScope, Assembly, HideBySig
    Stop(): PrivateScope, Assembly, HideBySig
    Cancel(): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.ParallelLoopStateFlags32: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Threading.Tasks.ParallelLoopStateFlags
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Int32 m_lowestBreakIteration IsVolatile : Assembly
  Properties:
    Int32 LowestBreakIteration 'get ' : 
    System.Nullable`1[System.Int64] NullableLowestBreakIteration 'get ' : 
  Methods:
    get_LowestBreakIteration(): PrivateScope, Assembly, HideBySig, SpecialName
    get_NullableLowestBreakIteration(): PrivateScope, Assembly, HideBySig, SpecialName
    ShouldExitLoop(Int32): PrivateScope, Assembly, HideBySig
    ShouldExitLoop(): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.ParallelLoopStateFlags64: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Threading.Tasks.ParallelLoopStateFlags
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Int64 m_lowestBreakIteration : Assembly
  Properties:
    Int64 LowestBreakIteration 'get ' : 
    System.Nullable`1[System.Int64] NullableLowestBreakIteration 'get ' : 
  Methods:
    get_LowestBreakIteration(): PrivateScope, Assembly, HideBySig, SpecialName
    get_NullableLowestBreakIteration(): PrivateScope, Assembly, HideBySig, SpecialName
    ShouldExitLoop(Int64): PrivateScope, Assembly, HideBySig
    ShouldExitLoop(): PrivateScope, Assembly, HideBySig
Struct System.Threading.Tasks.ParallelLoopResult: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
  Fields:
    Boolean m_completed : Assembly
    System.Nullable`1[System.Int64] m_lowestBreakIteration : Assembly
  Properties:
    Boolean IsCompleted 'get ' : 
    System.Nullable`1[System.Int64] LowestBreakIteration 'get ' : 
  Methods:
    get_IsCompleted(): PrivateScope, Public, HideBySig, SpecialName
    get_LowestBreakIteration(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.Shared`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
    Void .ctor(T): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    T Value : Assembly
Struct System.Threading.Tasks.IndexRange: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
  Fields:
    Int64 m_nFromInclusive : Assembly
    Int64 m_nToExclusive : Assembly
    System.Threading.Tasks.Shared`1[System.Int64] m_nSharedCurrentIndexOffset : Assembly
    Int32 m_bRangeFinished : Assembly
Struct System.Threading.Tasks.RangeWorker: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
    Void .ctor(System.Threading.Tasks.IndexRange[], Int32, Int64): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Threading.Tasks.IndexRange[] m_indexRanges : Assembly, InitOnly
    Int32 m_nCurrentIndexRange : Assembly
    Int64 m_nStep : Assembly
    Int64 m_nIncrementValue : Assembly
    Int64 m_nMaxIncrementValue : Assembly, InitOnly
  Methods:
    FindNewWork(Int64&(Out), Int64&(Out)): PrivateScope, Assembly, HideBySig
    FindNewWork32(Int32&(Out), Int32&(Out)): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.RangeManager: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(Int64, Int64, Int64, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Threading.Tasks.IndexRange[] m_indexRanges : Assembly, InitOnly
    Int32 m_nCurrentIndexRangeToAssign : Assembly
    Int64 m_nStep : Assembly
  Methods:
    RegisterNewWorker(): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.Task: AutoLayout, AnsiClass, Class, Public, HasSecurity
    Void .ctor(Boolean, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action, System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action`1[System.Object], System.Object): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action`1[System.Object], System.Object, System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action`1[System.Object], System.Object, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action`1[System.Object], System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action`1[System.Object], System.Object, System.Threading.Tasks.Task, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, System.Threading.Tasks.TaskScheduler, System.Threading.StackCrawlMark2 ByRef): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Object, System.Object, System.Threading.Tasks.Task, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, System.Threading.Tasks.TaskScheduler): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Threading.Tasks.IThreadPoolWorkItem
    System.IAsyncResult
    System.IDisposable
  Fields:
    System.Object m_action : Assembly
    System.Object m_stateObject : Assembly
    System.Threading.Tasks.TaskScheduler m_taskScheduler : Assembly
    System.Threading.Tasks.Task m_parent : Assembly, InitOnly
    System.Threading.ExecutionContext m_capturedContext : Assembly
    Int32 m_stateFlags IsVolatile : Assembly
    ContingentProperties m_contingentProperties IsVolatile : Assembly
    Int32 s_taskIdCounter : Assembly, Static
    Int32 CANCELLATION_REQUESTED : Assembly, Static
    System.Action`1[System.Object] s_taskCancelCallback : Assembly, Static
    System.Func`1[System.Threading.Tasks.Task+ContingentProperties] s_contingentPropertyCreator : Assembly, Static
    Int32 TASK_STATE_STARTED = 65536 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_DELEGATE_INVOKED = 131072 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_DISPOSED = 262144 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT = 524288 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED = 1048576 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_FAULTED = 2097152 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_CANCELED = 4194304 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_WAITING_ON_CHILDREN = 8388608 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_RAN_TO_COMPLETION = 16777216 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_WAITINGFORACTIVATION = 33554432 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_COMPLETION_RESERVED = 67108864 : Assembly, Static, Literal, HasDefault
    Int32 TASK_STATE_THREAD_WAS_ABORTED = 134217728 : Assembly, Static, Literal, HasDefault
  Properties:
    System.Threading.Tasks.TaskCreationOptions Options 'get ' : 
    Int32 Id   'get ' : 
    System.Nullable`1[System.Int32] CurrentId 'get ' : 
    System.Threading.Tasks.Task InternalCurrent 'get ' : 
    System.Threading.Tasks.StackGuard CurrentStackGuard 'get ' : 
    System.AggregateException Exception 'get ' : 
    System.Threading.Tasks.TaskStatus Status 'get ' : 
    Boolean IsCanceled 'get ' : 
    Boolean IsCancellationRequested 'get ' : 
    System.Threading.CancellationToken CancellationToken 'get ' : 
    Boolean IsCancellationAcknowledged 'get ' : 
    Boolean IsCompleted 'get ' : 
    Boolean CompletedSuccessfully 'get ' : 
    Boolean IsDisposed 'get ' : 
    System.Threading.Tasks.TaskCreationOptions CreationOptions 'get ' : 
    System.Object InternalAsyncState 'get ' : 
    System.Object AsyncState 'get ' : 
    System.Threading.Tasks.TaskScheduler ExecutingTaskScheduler 'get ' : 
    System.Threading.Tasks.TaskFactory Factory 'get ' : 
    System.Threading.ManualResetEventSlim CompletedEvent 'get ' : 
    Boolean IsSelfReplicatingRoot 'get ' : 
    Boolean IsChildReplica 'get ' : 
    Int32 ActiveChildCount 'get ' : 
    Boolean ExceptionRecorded 'get ' : 
    Boolean IsFaulted 'get ' : 
    Boolean IsExceptionObservedByParent 'get ' : 
    Boolean IsDelegateInvoked 'get ' : 
    System.Object SavedStateForNextReplica 'get set' : 
    System.Object SavedStateFromPreviousReplica 'get set' : 
    System.Threading.Tasks.Task HandedOverChildReplica 'get set' : 
  Methods:
    InnerInvoke(): PrivateScope, Assembly, HideBySig
    InnerInvokeWithArg(Task): PrivateScope, Assembly, HideBySig
    Wait(): PrivateScope, Public, HideBySig
    Wait(TimeSpan): PrivateScope, Public, HideBySig
    Wait(CancellationToken): PrivateScope, Public, HideBySig
    Wait(Int32): PrivateScope, Public, HideBySig
    Wait(Int32, CancellationToken): PrivateScope, Public, HideBySig
    InternalWait(Int32, CancellationToken): PrivateScope, Assembly, HideBySig
    InternalCancel(Boolean): PrivateScope, Assembly, HideBySig
    RecordInternalCancellationRequest(): PrivateScope, Assembly, HideBySig
    CancellationCleanupLogic(): PrivateScope, Assembly, HideBySig
    ContinueWithIsRightKind(TaskContinuationOptions): PrivateScope, Assembly, HideBySig
    ContinueWith(Action`1): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Func`2): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    CreationOptionsFromContinuationOptions(TaskContinuationOptions, TaskCreationOptions&(Out), InternalTaskOptions&(Out)): PrivateScope, Assembly, Static, HideBySig
    ContinueWithCore(Task, TaskScheduler, TaskContinuationOptions): PrivateScope, Assembly, HideBySig
    AddCompletionAction(Action`1): PrivateScope, Assembly, HideBySig
    WaitAll(Task[]): PrivateScope, Public, Static, HideBySig
    WaitAll(Task[], TimeSpan): PrivateScope, Public, Static, HideBySig
    WaitAll(Task[], Int32): PrivateScope, Public, Static, HideBySig
    WaitAll(Task[], CancellationToken): PrivateScope, Public, Static, HideBySig
    WaitAll(Task[], Int32, CancellationToken): PrivateScope, Public, Static, HideBySig
    FastWaitAll(Task[]): PrivateScope, Assembly, Static, HideBySig
    AddExceptionsForCompletedTask(List`1&, Task): PrivateScope, Assembly, Static, HideBySig
    WaitAny(Task[]): PrivateScope, Public, Static, HideBySig
    WaitAny(Task[], TimeSpan): PrivateScope, Public, Static, HideBySig
    WaitAny(Task[], CancellationToken): PrivateScope, Public, Static, HideBySig
    WaitAny(Task[], Int32): PrivateScope, Public, Static, HideBySig
    WaitAny(Task[], Int32, CancellationToken): PrivateScope, Public, Static, HideBySig
    TaskConstructorCore(Object, Object, CancellationToken, TaskCreationOptions, InternalTaskOptions, TaskScheduler): PrivateScope, Assembly, HideBySig
    DeregisterCancellationCallback(): PrivateScope, Assembly, HideBySig
    PossiblyCaptureContext(StackCrawlMark2&): PrivateScope, Assembly, HideBySig
    get_Options(): PrivateScope, Assembly, HideBySig, SpecialName
    AtomicStateUpdate(Int32, Int32): PrivateScope, Assembly, HideBySig
    AtomicStateUpdate(Int32, Int32, Int32&): PrivateScope, Assembly, HideBySig
    MarkStarted(): PrivateScope, Assembly, HideBySig
    AddNewChild(): PrivateScope, Assembly, HideBySig
    DisregardChild(): PrivateScope, Assembly, HideBySig
    Start(): PrivateScope, Public, HideBySig
    Start(TaskScheduler): PrivateScope, Public, HideBySig
    RunSynchronously(): PrivateScope, Public, HideBySig
    RunSynchronously(TaskScheduler): PrivateScope, Public, HideBySig
    InternalRunSynchronously(TaskScheduler): PrivateScope, Assembly, HideBySig
    InternalStartNew(Task, Object, Object, CancellationToken, TaskScheduler, TaskCreationOptions, InternalTaskOptions, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    InternalStartNew(Task, Object, Object, TaskScheduler, TaskCreationOptions, InternalTaskOptions, ExecutionContext): PrivateScope, Assembly, Static, HideBySig
    get_Id(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentId(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_InternalCurrent(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    get_CurrentStackGuard(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    get_Exception(): PrivateScope, Public, HideBySig, SpecialName
    get_Status(): PrivateScope, Public, HideBySig, SpecialName
    get_IsCanceled(): PrivateScope, Public, HideBySig, SpecialName
    get_IsCancellationRequested(): PrivateScope, Assembly, HideBySig, SpecialName
    get_CancellationToken(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsCancellationAcknowledged(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsCompleted(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_CompletedSuccessfully(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Assembly, HideBySig, SpecialName
    ThrowIfDisposed(): PrivateScope, Assembly, HideBySig
    get_CreationOptions(): PrivateScope, Public, HideBySig, SpecialName
    get_InternalAsyncState(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_AsyncState(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_ExecutingTaskScheduler(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Factory(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_CompletedEvent(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsSelfReplicatingRoot(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsChildReplica(): PrivateScope, Assembly, HideBySig, SpecialName
    get_ActiveChildCount(): PrivateScope, Assembly, HideBySig, SpecialName
    get_ExceptionRecorded(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsFaulted(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    ScheduleAndStart(Boolean): PrivateScope, Assembly, HideBySig
    AddException(Object): PrivateScope, Assembly, HideBySig
    ThrowIfExceptional(Boolean): PrivateScope, Assembly, HideBySig
    UpdateExceptionObservedStatus(): PrivateScope, Assembly, HideBySig
    get_IsExceptionObservedByParent(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsDelegateInvoked(): PrivateScope, Assembly, HideBySig, SpecialName
    Finish(Boolean): PrivateScope, Assembly, HideBySig
    FinishStageTwo(): PrivateScope, Assembly, HideBySig
    ProcessChildCompletion(Task): PrivateScope, Assembly, HideBySig
    AddExceptionsFromChildren(): PrivateScope, Assembly, HideBySig
    FinishThreadAbortedTask(Boolean, Boolean): PrivateScope, Assembly, HideBySig
    ShouldReplicate(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    CreateReplicaTask(Action`1, Object, Task, TaskScheduler, TaskCreationOptions, InternalTaskOptions): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    get_SavedStateForNextReplica(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    set_SavedStateForNextReplica(Object): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_SavedStateFromPreviousReplica(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    set_SavedStateFromPreviousReplica(Object): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_HandedOverChildReplica(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    set_HandedOverChildReplica(Task): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    ExecuteEntry(Boolean): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.Task+ContingentProperties: AutoLayout, AnsiClass, Class, NestedAssembly, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Int32 m_internalCancellationRequested IsVolatile : Public
    Int32 m_completionCountdown IsVolatile : Assembly
    System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder IsVolatile : Public
    System.Collections.Generic.List`1[System.Threading.Tasks.Task] m_exceptionalChildren IsVolatile : Public
    System.Collections.Generic.List`1[System.Threading.Tasks.Task+TaskContinuation] m_continuations IsVolatile : Public
    System.Threading.CancellationToken m_cancellationToken : Public
    System.Threading.Tasks.Shared`1[System.Threading.CancellationTokenRegistration] m_cancellationRegistration : Public
Struct System.Threading.Tasks.Task+TaskContinuation: AutoLayout, AnsiClass, Class, NestedAssembly, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
    Void .ctor(System.Threading.Tasks.Task, System.Threading.Tasks.TaskScheduler, System.Threading.Tasks.TaskContinuationOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Action`1[System.Threading.Tasks.Task]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Object m_task : Assembly
    System.Threading.Tasks.TaskScheduler m_taskScheduler : Assembly
    System.Threading.Tasks.TaskContinuationOptions m_options : Assembly
  Methods:
    Run(Task, Boolean): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.Task`1[TResult]: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
  Type parameter: TResult
  :System.Threading.Tasks.Task
    Void .ctor(System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean, TResult, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[TResult]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[TResult], System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[TResult], System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[TResult], System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`2[System.Object,TResult], System.Object): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`2[System.Object,TResult], System.Object, System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`2[System.Object,TResult], System.Object, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`2[System.Object,TResult], System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[TResult], System.Threading.Tasks.Task, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, System.Threading.Tasks.TaskScheduler, System.Threading.StackCrawlMark2 ByRef): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`1[TResult], System.Threading.Tasks.Task, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, System.Threading.Tasks.TaskScheduler): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`2[System.Object,TResult], System.Object, System.Threading.Tasks.Task, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, System.Threading.Tasks.TaskScheduler, System.Threading.StackCrawlMark2 ByRef): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Func`2[System.Object,TResult], System.Object, System.Threading.Tasks.Task, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions, System.Threading.Tasks.TaskScheduler): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    Boolean m_resultWasSet : Assembly
  Properties:
    TResult Result 'get set' : 
    System.Threading.Tasks.TaskFactory`1[TResult] Factory 'get ' : 
    System.Object InternalAsyncState 'get ' : 
  Methods:
    StartNew(Task, Func`1, CancellationToken, TaskCreationOptions, InternalTaskOptions, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    StartNew(Task, Func`2, Object, CancellationToken, TaskCreationOptions, InternalTaskOptions, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    TrySetResult(TResult): PrivateScope, Assembly, HideBySig
    get_Result(): PrivateScope, Public, HideBySig, SpecialName
    set_Result(TResult): PrivateScope, Assembly, HideBySig, SpecialName
    TrySetException(Object): PrivateScope, Assembly, HideBySig
    get_Factory(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_InternalAsyncState(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    ContinueWith(Action`1): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Action`1, TaskScheduler, CancellationToken, TaskContinuationOptions, StackCrawlMark2&): PrivateScope, Assembly, HideBySig
    ContinueWith(Func`2): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWith(Func`2, TaskScheduler, CancellationToken, TaskContinuationOptions, StackCrawlMark2&): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.SystemThreadingTasks_FutureDebugView`1[TResult]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TResult
    Void .ctor(System.Threading.Tasks.Task`1[TResult]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    TResult Result 'get ' : 
    System.Object AsyncState 'get ' : 
    System.Threading.Tasks.TaskCreationOptions CreationOptions 'get ' : 
    System.Exception Exception 'get ' : 
    Int32 Id   'get ' : 
    Boolean CancellationPending 'get ' : 
    System.Threading.Tasks.TaskStatus Status 'get ' : 
  Methods:
    get_Result(): PrivateScope, Public, HideBySig, SpecialName
    get_AsyncState(): PrivateScope, Public, HideBySig, SpecialName
    get_CreationOptions(): PrivateScope, Public, HideBySig, SpecialName
    get_Exception(): PrivateScope, Public, HideBySig, SpecialName
    get_Id(): PrivateScope, Public, HideBySig, SpecialName
    get_CancellationPending(): PrivateScope, Public, HideBySig, SpecialName
    get_Status(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.TaskFactory`1[TResult]: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
  Type parameter: TResult
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.Tasks.TaskScheduler): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.CancellationToken CancellationToken 'get ' : 
    System.Threading.Tasks.TaskScheduler Scheduler 'get ' : 
    System.Threading.Tasks.TaskCreationOptions CreationOptions 'get ' : 
    System.Threading.Tasks.TaskContinuationOptions ContinuationOptions 'get ' : 
  Methods:
    get_CancellationToken(): PrivateScope, Public, HideBySig, SpecialName
    get_Scheduler(): PrivateScope, Public, HideBySig, SpecialName
    get_CreationOptions(): PrivateScope, Public, HideBySig, SpecialName
    get_ContinuationOptions(): PrivateScope, Public, HideBySig, SpecialName
    StartNew(Func`1): PrivateScope, Public, HideBySig
    StartNew(Func`1, CancellationToken): PrivateScope, Public, HideBySig
    StartNew(Func`1, TaskCreationOptions): PrivateScope, Public, HideBySig
    StartNew(Func`1, CancellationToken, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object, CancellationToken): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object, CancellationToken, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Func`2): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Func`2, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Func`2, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    FromAsyncImpl(IAsyncResult, Func`2, TaskCreationOptions, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    FromAsync(Func`3, Func`2, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`3, Func`2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsyncImpl(Func`3, Func`2, Object, TaskCreationOptions): PrivateScope, Assembly, Static, HideBySig
    FromAsync(Func`4, Func`2, TArg1, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`4, Func`2, TArg1, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsyncImpl(Func`4, Func`2, TArg1, Object, TaskCreationOptions): PrivateScope, Assembly, Static, HideBySig
    FromAsync(Func`5, Func`2, TArg1, TArg2, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`5, Func`2, TArg1, TArg2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsyncImpl(Func`5, Func`2, TArg1, TArg2, Object, TaskCreationOptions): PrivateScope, Assembly, Static, HideBySig
    FromAsync(Func_`6, Func`2, TArg1, TArg2, TArg3, Object): PrivateScope, Public, HideBySig
    FromAsync(Func_`6, Func`2, TArg1, TArg2, TArg3, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsyncImpl(Func_`6, Func`2, TArg1, TArg2, TArg3, Object, TaskCreationOptions): PrivateScope, Assembly, Static, HideBySig
    ContinueWhenAll(Task[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, TaskContinuationOptions, CancellationToken, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    ContinueWhenAll(Task`1[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, TaskContinuationOptions, CancellationToken, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    ContinueWhenAny(Task[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, TaskContinuationOptions, CancellationToken, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
    ContinueWhenAny(Task`1[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, TaskContinuationOptions, CancellationToken, TaskScheduler, StackCrawlMark2&): PrivateScope, Assembly, Static, HideBySig
Struct System.Threading.Tasks.TaskStatus: AutoLayout, AnsiClass, Class, Public, Sealed
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Threading.Tasks.TaskStatus Created = 0 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus WaitingForActivation = 1 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus WaitingToRun = 2 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus Running = 3 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus WaitingForChildrenToComplete = 4 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus RanToCompletion = 5 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus Canceled = 6 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskStatus Faulted = 7 : Public, Static, Literal, HasDefault
Class System.Threading.Tasks.SystemThreadingTasks_TaskDebugView: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(System.Threading.Tasks.Task): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Object AsyncState 'get ' : 
    System.Threading.Tasks.TaskCreationOptions CreationOptions 'get ' : 
    System.Exception Exception 'get ' : 
    Int32 Id   'get ' : 
    Boolean CancellationPending 'get ' : 
    System.Threading.Tasks.TaskStatus Status 'get ' : 
  Methods:
    get_AsyncState(): PrivateScope, Public, HideBySig, SpecialName
    get_CreationOptions(): PrivateScope, Public, HideBySig, SpecialName
    get_Exception(): PrivateScope, Public, HideBySig, SpecialName
    get_Id(): PrivateScope, Public, HideBySig, SpecialName
    get_CancellationPending(): PrivateScope, Public, HideBySig, SpecialName
    get_Status(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.ParallelForReplicatingTask: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Threading.Tasks.Task
    Void .ctor(System.Threading.Tasks.ParallelOptions, System.Action, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    ShouldReplicate(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    CreateReplicaTask(Action`1, Object, Task, TaskScheduler, TaskCreationOptions, InternalTaskOptions): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Threading.Tasks.ParallelForReplicaTask: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Threading.Tasks.Task
    Void .ctor(System.Action`1[System.Object], System.Object, System.Threading.Tasks.Task, System.Threading.Tasks.TaskScheduler, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.InternalTaskOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Object m_stateForNextReplica : Assembly
    System.Object m_stateFromPreviousReplica : Assembly
    System.Threading.Tasks.Task m_handedOverChildReplica : Assembly
  Properties:
    System.Object SavedStateForNextReplica 'get set' : 
    System.Object SavedStateFromPreviousReplica 'get set' : 
    System.Threading.Tasks.Task HandedOverChildReplica 'get set' : 
  Methods:
    SaveStateForNextReplica(Object): PrivateScope, Assembly, HideBySig
    get_SavedStateForNextReplica(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    set_SavedStateForNextReplica(Object): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_SavedStateFromPreviousReplica(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    set_SavedStateFromPreviousReplica(Object): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_HandedOverChildReplica(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    set_HandedOverChildReplica(Task): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Struct System.Threading.Tasks.TaskCreationOptions: AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Threading.Tasks.TaskCreationOptions None = 0 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskCreationOptions PreferFairness = 1 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskCreationOptions LongRunning = 2 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskCreationOptions AttachedToParent = 4 : Public, Static, Literal, HasDefault
Struct System.Threading.Tasks.InternalTaskOptions: AutoLayout, AnsiClass, Class, Sealed, Serializable
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Threading.Tasks.InternalTaskOptions None = 0 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.InternalTaskOptions InternalOptionsMask = 65280 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.InternalTaskOptions ChildReplica = 256 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.InternalTaskOptions ContinuationTask = 512 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.InternalTaskOptions PromiseTask = 1024 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.InternalTaskOptions SelfReplicating = 2048 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.InternalTaskOptions QueuedByRuntime = 8192 : Public, Static, Literal, HasDefault
Struct System.Threading.Tasks.TaskContinuationOptions: AutoLayout, AnsiClass, Class, Public, Sealed, Serializable
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Threading.Tasks.TaskContinuationOptions None = 0 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions PreferFairness = 1 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions LongRunning = 2 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions AttachedToParent = 4 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions NotOnRanToCompletion = 65536 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions NotOnFaulted = 131072 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions NotOnCanceled = 262144 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions OnlyOnRanToCompletion = 393216 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions OnlyOnFaulted = 327680 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions OnlyOnCanceled = 196608 : Public, Static, Literal, HasDefault
    System.Threading.Tasks.TaskContinuationOptions ExecuteSynchronously = 524288 : Public, Static, Literal, HasDefault
Class System.Threading.Tasks.StackGuard: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    TryBeginInliningScope(): PrivateScope, Assembly, HideBySig
    EndInliningScope(): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.TaskCanceledException: AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
  :System.OperationCanceledException
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.Tasks.Task): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.Tasks.Task Task 'get ' : 
  Methods:
    get_Task(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.TaskExceptionHolder: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(System.Threading.Tasks.Task): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    Add(Object): PrivateScope, Assembly, HideBySig
    MarkAsHandled(Boolean): PrivateScope, Assembly, HideBySig
    CreateExceptionObject(Boolean, Exception): PrivateScope, Assembly, HideBySig
Class System.Threading.Tasks.TaskFactory: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.CancellationToken): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.Tasks.TaskScheduler): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.CancellationToken CancellationToken 'get ' : 
    System.Threading.Tasks.TaskScheduler Scheduler 'get ' : 
    System.Threading.Tasks.TaskCreationOptions CreationOptions 'get ' : 
    System.Threading.Tasks.TaskContinuationOptions ContinuationOptions 'get ' : 
  Methods:
    ContinueWhenAll(Task[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    CommonCWAnyLogic(Task[]): PrivateScope, Assembly, Static, HideBySig
    ContinueWhenAny(Task[], Action`1): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Action`1, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Action`1, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Action`1, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Func`2, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Action`1): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Action`1, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Action`1, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAny(Task`1[], Action`1, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    CheckMultiContinuationTasksAndCopy(Task[]): PrivateScope, Assembly, Static, HideBySig
    CheckMultiContinuationTasksAndCopy(Task`1[]): PrivateScope, Assembly, Static, HideBySig
    CheckMultiTaskContinuationOptions(TaskContinuationOptions): PrivateScope, Assembly, Static, HideBySig
    CheckCreationOptions(TaskCreationOptions): PrivateScope, Assembly, Static, HideBySig
    get_CancellationToken(): PrivateScope, Public, HideBySig, SpecialName
    get_Scheduler(): PrivateScope, Public, HideBySig, SpecialName
    get_CreationOptions(): PrivateScope, Public, HideBySig, SpecialName
    get_ContinuationOptions(): PrivateScope, Public, HideBySig, SpecialName
    StartNew(Action): PrivateScope, Public, HideBySig
    StartNew(Action, CancellationToken): PrivateScope, Public, HideBySig
    StartNew(Action, TaskCreationOptions): PrivateScope, Public, HideBySig
    StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    StartNew(Action, CancellationToken, TaskCreationOptions, InternalTaskOptions, TaskScheduler): PrivateScope, Assembly, HideBySig
    StartNew(Action`1, Object): PrivateScope, Public, HideBySig
    StartNew(Action`1, Object, CancellationToken): PrivateScope, Public, HideBySig
    StartNew(Action`1, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    StartNew(Action`1, Object, CancellationToken, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    StartNew(Func`1): PrivateScope, Public, HideBySig
    StartNew(Func`1, CancellationToken): PrivateScope, Public, HideBySig
    StartNew(Func`1, TaskCreationOptions): PrivateScope, Public, HideBySig
    StartNew(Func`1, CancellationToken, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object, CancellationToken): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    StartNew(Func`2, Object, CancellationToken, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Action`1): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Action`1, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Action`1, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    FromAsync(Func`3, Action`1, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`3, Action`1, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(Func`4, Action`1, TArg1, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`4, Action`1, TArg1, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(Func`5, Action`1, TArg1, TArg2, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`5, Action`1, TArg1, TArg2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(Func_`6, Action`1, TArg1, TArg2, TArg3, Object): PrivateScope, Public, HideBySig
    FromAsync(Func_`6, Action`1, TArg1, TArg2, TArg3, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Func`2): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Func`2, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(IAsyncResult, Func`2, TaskCreationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    FromAsync(Func`3, Func`2, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`3, Func`2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(Func`4, Func`2, TArg1, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`4, Func`2, TArg1, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(Func`5, Func`2, TArg1, TArg2, Object): PrivateScope, Public, HideBySig
    FromAsync(Func`5, Func`2, TArg1, TArg2, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    FromAsync(Func_`6, Func`2, TArg1, TArg2, TArg3, Object): PrivateScope, Public, HideBySig
    FromAsync(Func_`6, Func`2, TArg1, TArg2, TArg3, Object, TaskCreationOptions): PrivateScope, Public, HideBySig
    CheckFromAsyncOptions(TaskCreationOptions, Boolean): PrivateScope, Assembly, Static, HideBySig
    CommonCWAllLogic(Task[]): PrivateScope, Assembly, Static, HideBySig
    ContinueWhenAll(Task[], Action`1): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Action`1, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Action`1, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task[], Action`1, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Action`1): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Action`1, CancellationToken): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Action`1, TaskContinuationOptions): PrivateScope, Public, HideBySig
    ContinueWhenAll(Task`1[], Action`1, CancellationToken, TaskContinuationOptions, TaskScheduler): PrivateScope, Public, HideBySig
Class System.Threading.Tasks.TaskCompletionSource`1[TResult]: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
  Type parameter: TResult
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Object): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Object, System.Threading.Tasks.TaskCreationOptions): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Threading.Tasks.Task`1[TResult] Task 'get ' : 
  Methods:
    get_Task(): PrivateScope, Public, HideBySig, SpecialName
    TrySetException(Exception): PrivateScope, Public, HideBySig
    TrySetException(IEnumerable`1): PrivateScope, Public, HideBySig
    SetException(Exception): PrivateScope, Public, HideBySig
    SetException(IEnumerable`1): PrivateScope, Public, HideBySig
    TrySetResult(TResult): PrivateScope, Public, HideBySig
    SetResult(TResult): PrivateScope, Public, HideBySig
    SetCanceled(): PrivateScope, Public, HideBySig
    TrySetCanceled(): PrivateScope, Public, HideBySig
Class System.Threading.Tasks.TaskScheduler: AutoLayout, AnsiClass, Class, Public, Abstract, HasSecurity, BeforeFieldInit
  Fields:
    System.WeakReference m_weakReferenceToSelf : Assembly
    Int32 s_taskSchedulerIdCounter : Assembly, Static
  Properties:
    Int32 MaximumConcurrencyLevel 'get ' : 
    Boolean RequiresAtomicStartTransition 'get ' : 
    System.Threading.Tasks.TaskScheduler Default 'get ' : 
    System.Threading.Tasks.TaskScheduler Current 'get ' : 
    Int32 Id   'get ' : 
  Events:
    System.EventHandler`1[System.Threading.Tasks.UnobservedTaskExceptionEventArgs] _unobservedTaskException: 
    System.EventHandler`1[System.Threading.Tasks.UnobservedTaskExceptionEventArgs] UnobservedTaskException: 
  Methods:
    get_MaximumConcurrencyLevel(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    GetThreadStatics(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    TryRunInline(Task, Boolean, Object): PrivateScope, Assembly, HideBySig
    TryRunInline(Task, Boolean): PrivateScope, Assembly, HideBySig
    NotifyWorkItemProgress(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    get_RequiresAtomicStartTransition(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_Default(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Current(): PrivateScope, Public, Static, HideBySig, SpecialName
    FromCurrentSynchronizationContext(): PrivateScope, Public, Static, HideBySig
    get_Id(): PrivateScope, Public, HideBySig, SpecialName
    add_UnobservedTaskException(EventHandler`1): PrivateScope, Public, Static, HideBySig, SpecialName
    remove_UnobservedTaskException(EventHandler`1): PrivateScope, Public, Static, HideBySig, SpecialName
    PublishUnobservedTaskException(Object, UnobservedTaskExceptionEventArgs): PrivateScope, Assembly, Static, HideBySig
    GetScheduledTasksForDebugger(): PrivateScope, Assembly, HideBySig
    GetTaskSchedulersForDebugger(): PrivateScope, Assembly, Static, HideBySig
    RegisterTaskScheduler(TaskScheduler): PrivateScope, Assembly, Static, HideBySig
    UnregisterTaskScheduler(TaskScheduler): PrivateScope, Assembly, Static, HideBySig
Class System.Threading.Tasks.TaskScheduler+SystemThreadingTasks_TaskSchedulerDebugView: AutoLayout, AnsiClass, Class, NestedAssembly, Sealed, BeforeFieldInit
    Void .ctor(System.Threading.Tasks.TaskScheduler): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Id   'get ' : 
    System.Collections.Generic.IEnumerable`1[System.Threading.Tasks.Task] ScheduledTasks 'get ' : 
  Methods:
    get_Id(): PrivateScope, Public, HideBySig, SpecialName
    get_ScheduledTasks(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.SynchronizationContextTaskScheduler: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Threading.Tasks.TaskScheduler
    Void .ctor(): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 MaximumConcurrencyLevel 'get ' : 
  Methods:
    get_MaximumConcurrencyLevel(): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class System.Threading.Tasks.UnobservedTaskExceptionEventArgs: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.EventArgs
    Void .ctor(System.AggregateException): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    Boolean m_observed : Assembly
  Properties:
    Boolean Observed 'get ' : 
    System.AggregateException Exception 'get ' : 
  Methods:
    SetObserved(): PrivateScope, Public, HideBySig
    get_Observed(): PrivateScope, Public, HideBySig, SpecialName
    get_Exception(): PrivateScope, Public, HideBySig, SpecialName
Class System.Threading.Tasks.ThreadPoolTaskScheduler: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Threading.Tasks.TaskScheduler
    Void .ctor(): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean RequiresAtomicStartTransition 'get ' : 
  Methods:
    NotifyWorkItemProgress(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_RequiresAtomicStartTransition(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Threading.Tasks.TaskSchedulerException: AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
  :System.Exception
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class System.Threading.BarrierPostPhaseException: AutoLayout, AnsiClass, Class, Public, Serializable, BeforeFieldInit
  :System.Exception
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.String, System.Exception): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class System.Threading.Barrier: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, System.Action`1[System.Threading.Barrier]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 ParticipantsRemaining 'get ' : 
    Int32 ParticipantCount 'get ' : 
    Int64 CurrentPhaseNumber 'get ' : 
  Methods:
    get_ParticipantsRemaining(): PrivateScope, Public, HideBySig, SpecialName
    get_ParticipantCount(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentPhaseNumber(): PrivateScope, Public, HideBySig, SpecialName
    AddParticipant(): PrivateScope, Public, HideBySig
    AddParticipants(Int32): PrivateScope, Public, HideBySig
    RemoveParticipant(): PrivateScope, Public, HideBySig
    RemoveParticipants(Int32): PrivateScope, Public, HideBySig
    SignalAndWait(): PrivateScope, Public, HideBySig
    SignalAndWait(CancellationToken): PrivateScope, Public, HideBySig
    SignalAndWait(TimeSpan): PrivateScope, Public, HideBySig
    SignalAndWait(TimeSpan, CancellationToken): PrivateScope, Public, HideBySig
    SignalAndWait(Int32): PrivateScope, Public, HideBySig
    SignalAndWait(Int32, CancellationToken): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Collections.Concurrent.BlockingCollection`1[T]: AutoLayout, AnsiClass, Class, Public, HasSecurity, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Concurrent.IProducerConsumerCollection`1[T], Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Concurrent.IProducerConsumerCollection`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
    System.Collections.ICollection
    System.IDisposable
  Properties:
    Int32 BoundedCapacity 'get ' : 
    Boolean IsAddingCompleted 'get ' : 
    Boolean IsCompleted 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    get_BoundedCapacity(): PrivateScope, Public, HideBySig, SpecialName
    get_IsAddingCompleted(): PrivateScope, Public, HideBySig, SpecialName
    get_IsCompleted(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Add(T): PrivateScope, Public, HideBySig
    Add(T, CancellationToken): PrivateScope, Public, HideBySig
    TryAdd(T): PrivateScope, Public, HideBySig
    TryAdd(T, TimeSpan): PrivateScope, Public, HideBySig
    TryAdd(T, Int32): PrivateScope, Public, HideBySig
    TryAdd(T, Int32, CancellationToken): PrivateScope, Public, HideBySig
    Take(): PrivateScope, Public, HideBySig
    Take(CancellationToken): PrivateScope, Public, HideBySig
    TryTake(T&(Out)): PrivateScope, Public, HideBySig
    TryTake(T&(Out), TimeSpan): PrivateScope, Public, HideBySig
    TryTake(T&(Out), Int32): PrivateScope, Public, HideBySig
    TryTake(T&(Out), Int32, CancellationToken): PrivateScope, Public, HideBySig
    AddToAny(BlockingCollection`1[], T): PrivateScope, Public, Static, HideBySig
    AddToAny(BlockingCollection`1[], T, CancellationToken): PrivateScope, Public, Static, HideBySig
    TryAddToAny(BlockingCollection`1[], T): PrivateScope, Public, Static, HideBySig
    TryAddToAny(BlockingCollection`1[], T, TimeSpan): PrivateScope, Public, Static, HideBySig
    TryAddToAny(BlockingCollection`1[], T, Int32): PrivateScope, Public, Static, HideBySig
    TryAddToAny(BlockingCollection`1[], T, Int32, CancellationToken): PrivateScope, Public, Static, HideBySig
    TakeFromAny(BlockingCollection`1[], T&(Out)): PrivateScope, Public, Static, HideBySig
    TakeFromAny(BlockingCollection`1[], T&(Out), CancellationToken): PrivateScope, Public, Static, HideBySig
    TryTakeFromAny(BlockingCollection`1[], T&(Out)): PrivateScope, Public, Static, HideBySig
    TryTakeFromAny(BlockingCollection`1[], T&(Out), TimeSpan): PrivateScope, Public, Static, HideBySig
    TryTakeFromAny(BlockingCollection`1[], T&(Out), Int32): PrivateScope, Public, Static, HideBySig
    TryTakeFromAny(BlockingCollection`1[], T&(Out), Int32, CancellationToken): PrivateScope, Public, Static, HideBySig
    CompleteAdding(): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    ToArray(): PrivateScope, Public, HideBySig
    CopyTo(T[], Int32): PrivateScope, Public, HideBySig
    GetConsumingEnumerable(): PrivateScope, Public, HideBySig
    GetConsumingEnumerable(CancellationToken): PrivateScope, Public, HideBySig
Class System.Collections.Concurrent.SystemThreadingCollections_BlockingCollectionDebugView`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Collections.Concurrent.BlockingCollection`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    T[] Items  'get ' : 
  Methods:
    get_Items(): PrivateScope, Public, HideBySig, SpecialName
Class System.Collections.Concurrent.ConcurrentBag`1[T]: AutoLayout, AnsiClass, Class, Public, Serializable, HasSecurity, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Concurrent.IProducerConsumerCollection`1[T]
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
    System.Collections.ICollection
  Properties:
    Int32 Count 'get ' : 
    Boolean IsEmpty 'get ' : 
  Methods:
    Add(T): PrivateScope, Public, HideBySig
    TryTake(T&(Out)): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    TryPeek(T&(Out)): PrivateScope, Public, HideBySig
    CopyTo(T[], Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    ToArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_IsEmpty(): PrivateScope, Public, HideBySig, SpecialName
Class System.Collections.Concurrent.ConcurrentBag`1+Node[T]: AutoLayout, AnsiClass, Class, NestedAssembly, Serializable, BeforeFieldInit
  Type parameter: T
    Void .ctor(T): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    T m_value : Public
    Node m_next : Public
    Node m_prev : Public
Class System.Collections.Concurrent.ConcurrentBag`1+ThreadLocalList[T]: AutoLayout, AnsiClass, Class, NestedAssembly, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Threading.Thread): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    Node m_head : Assembly
    Int32 m_currentOp IsVolatile : Assembly
    Int32 m_stealCount : Assembly
    ThreadLocalList m_nextList : Assembly
    Boolean m_lockTaken : Assembly
    System.Threading.Thread m_ownerThread : Assembly
    Int32 m_version IsVolatile : Assembly
  Properties:
    Int32 Count 'get ' : 
  Methods:
    Add(T, Boolean): PrivateScope, Assembly, HideBySig
    Remove(T&(Out)): PrivateScope, Assembly, HideBySig
    Peek(T&(Out)): PrivateScope, Assembly, HideBySig
    Steal(T&(Out), Boolean): PrivateScope, Assembly, HideBySig
    get_Count(): PrivateScope, Assembly, HideBySig, SpecialName
Struct System.Collections.Concurrent.ConcurrentBag`1+ListOperation[T]: AutoLayout, AnsiClass, Class, NestedAssembly, Sealed
  Type parameter: T
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    ListOperation None = 0 : Public, Static, Literal, HasDefault
    ListOperation Add = 1 : Public, Static, Literal, HasDefault
    ListOperation Take = 2 : Public, Static, Literal, HasDefault
Class System.Collections.Concurrent.SystemThreadingCollection_IProducerConsumerCollectionDebugView`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Collections.Concurrent.IProducerConsumerCollection`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    T[] Items  'get ' : 
  Methods:
    get_Items(): PrivateScope, Public, HideBySig, SpecialName
Class System.Linq.ParallelEnumerable: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    Union(ParallelQuery`1, IEnumerable`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    Intersect(ParallelQuery`1, ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Intersect(ParallelQuery`1, IEnumerable`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    Intersect(ParallelQuery`1, ParallelQuery`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Intersect(ParallelQuery`1, IEnumerable`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    Except(ParallelQuery`1, ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Except(ParallelQuery`1, IEnumerable`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    Except(ParallelQuery`1, ParallelQuery`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Except(ParallelQuery`1, IEnumerable`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    AsEnumerable(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    ToArray(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    ToList(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    ToDictionary(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    ToDictionary(ParallelQuery`1, Func`2, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    ToDictionary(ParallelQuery`1, Func`2, Func`2): PrivateScope, Public, Static, HideBySig
    ToDictionary(ParallelQuery`1, Func`2, Func`2, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    ToLookup(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    ToLookup(ParallelQuery`1, Func`2, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    ToLookup(ParallelQuery`1, Func`2, Func`2): PrivateScope, Public, Static, HideBySig
    ToLookup(ParallelQuery`1, Func`2, Func`2, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Reverse(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    OfType(ParallelQuery): PrivateScope, Public, Static, HideBySig
    Cast(ParallelQuery): PrivateScope, Public, Static, HideBySig
    First(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    First(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    FirstOrDefault(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    FirstOrDefault(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Last(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Last(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    LastOrDefault(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    LastOrDefault(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Single(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Single(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    SingleOrDefault(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    SingleOrDefault(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    DefaultIfEmpty(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    DefaultIfEmpty(ParallelQuery`1, TSource): PrivateScope, Public, Static, HideBySig
    ElementAt(ParallelQuery`1, Int32): PrivateScope, Public, Static, HideBySig
    ElementAtOrDefault(ParallelQuery`1, Int32): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Average(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Any(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Any(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    All(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Contains(ParallelQuery`1, TSource): PrivateScope, Public, Static, HideBySig
    Contains(ParallelQuery`1, TSource, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Take(ParallelQuery`1, Int32): PrivateScope, Public, Static, HideBySig
    TakeWhile(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    TakeWhile(ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    Skip(ParallelQuery`1, Int32): PrivateScope, Public, Static, HideBySig
    SkipWhile(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    SkipWhile(ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    Concat(ParallelQuery`1, ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Concat(ParallelQuery`1, IEnumerable`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    SequenceEqual(ParallelQuery`1, ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    SequenceEqual(ParallelQuery`1, IEnumerable`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    SequenceEqual(ParallelQuery`1, ParallelQuery`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    SequenceEqual(ParallelQuery`1, IEnumerable`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    Distinct(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Distinct(ParallelQuery`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Union(ParallelQuery`1, ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Union(ParallelQuery`1, IEnumerable`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    Union(ParallelQuery`1, ParallelQuery`1, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Aggregate(ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    Aggregate(ParallelQuery`1, Func`3, QueryAggregationOptions): PrivateScope, Assembly, Static, HideBySig
    Aggregate(ParallelQuery`1, TAccumulate, Func`3): PrivateScope, Public, Static, HideBySig
    Aggregate(ParallelQuery`1, TAccumulate, Func`3, QueryAggregationOptions): PrivateScope, Assembly, Static, HideBySig
    Aggregate(ParallelQuery`1, TAccumulate, Func`3, Func`2): PrivateScope, Public, Static, HideBySig
    Aggregate(ParallelQuery`1, TAccumulate, Func`3, Func`3, Func`2): PrivateScope, Public, Static, HideBySig
    Aggregate(ParallelQuery`1, Func`1, Func`3, Func`3, Func`2): PrivateScope, Public, Static, HideBySig
    Count(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Count(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    LongCount(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    LongCount(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Sum(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Min(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    Max(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    AsParallel(IEnumerable`1): PrivateScope, Public, Static, HideBySig
    AsParallel(Partitioner`1): PrivateScope, Public, Static, HideBySig
    AsOrdered(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    AsOrdered(ParallelQuery): PrivateScope, Public, Static, HideBySig
    AsUnordered(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    AsParallel(IEnumerable): PrivateScope, Public, Static, HideBySig
    AsSequential(ParallelQuery`1): PrivateScope, Public, Static, HideBySig
    WithTaskScheduler(ParallelQuery`1, TaskScheduler): PrivateScope, Assembly, Static, HideBySig
    WithDegreeOfParallelism(ParallelQuery`1, Int32): PrivateScope, Public, Static, HideBySig
    WithCancellation(ParallelQuery`1, CancellationToken): PrivateScope, Public, Static, HideBySig
    WithExecutionMode(ParallelQuery`1, ParallelExecutionMode): PrivateScope, Public, Static, HideBySig
    WithMergeOptions(ParallelQuery`1, ParallelMergeOptions): PrivateScope, Public, Static, HideBySig
    Range(Int32, Int32): PrivateScope, Public, Static, HideBySig
    Repeat(TResult, Int32): PrivateScope, Public, Static, HideBySig
    Empty(): PrivateScope, Public, Static, HideBySig
    ForAll(ParallelQuery`1, Action`1): PrivateScope, Public, Static, HideBySig
    Where(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Where(ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    Select(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    Select(ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    Zip(ParallelQuery`1, ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    Zip(ParallelQuery`1, IEnumerable`1, Func`3): PrivateScope, Public, Static, HideBySig (Obsolete)
    Join(ParallelQuery`1, ParallelQuery`1, Func`2, Func`2, Func`3): PrivateScope, Public, Static, HideBySig
    Join(ParallelQuery`1, IEnumerable`1, Func`2, Func`2, Func`3): PrivateScope, Public, Static, HideBySig (Obsolete)
    Join(ParallelQuery`1, ParallelQuery`1, Func`2, Func`2, Func`3, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    Join(ParallelQuery`1, IEnumerable`1, Func`2, Func`2, Func`3, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    GroupJoin(ParallelQuery`1, ParallelQuery`1, Func`2, Func`2, Func`3): PrivateScope, Public, Static, HideBySig
    GroupJoin(ParallelQuery`1, IEnumerable`1, Func`2, Func`2, Func`3): PrivateScope, Public, Static, HideBySig (Obsolete)
    GroupJoin(ParallelQuery`1, ParallelQuery`1, Func`2, Func`2, Func`3, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    GroupJoin(ParallelQuery`1, IEnumerable`1, Func`2, Func`2, Func`3, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig (Obsolete)
    SelectMany(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    SelectMany(ParallelQuery`1, Func`3): PrivateScope, Public, Static, HideBySig
    SelectMany(ParallelQuery`1, Func`2, Func`3): PrivateScope, Public, Static, HideBySig
    SelectMany(ParallelQuery`1, Func`3, Func`3): PrivateScope, Public, Static, HideBySig
    OrderBy(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    OrderBy(ParallelQuery`1, Func`2, IComparer`1): PrivateScope, Public, Static, HideBySig
    OrderByDescending(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    OrderByDescending(ParallelQuery`1, Func`2, IComparer`1): PrivateScope, Public, Static, HideBySig
    ThenBy(OrderedParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    ThenBy(OrderedParallelQuery`1, Func`2, IComparer`1): PrivateScope, Public, Static, HideBySig
    ThenByDescending(OrderedParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    ThenByDescending(OrderedParallelQuery`1, Func`2, IComparer`1): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, Func`2): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, Func`2, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, Func`3): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, Func`3, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, Func`2, Func`3): PrivateScope, Public, Static, HideBySig
    GroupBy(ParallelQuery`1, Func`2, Func`2, Func`3, IEqualityComparer`1): PrivateScope, Public, Static, HideBySig
Struct System.Linq.ParallelMergeOptions: AutoLayout, AnsiClass, Class, Public, Sealed
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Linq.ParallelMergeOptions Default = 0 : Public, Static, Literal, HasDefault
    System.Linq.ParallelMergeOptions NotBuffered = 1 : Public, Static, Literal, HasDefault
    System.Linq.ParallelMergeOptions AutoBuffered = 2 : Public, Static, Literal, HasDefault
    System.Linq.ParallelMergeOptions FullyBuffered = 3 : Public, Static, Literal, HasDefault
Class System.Linq.Parallel.AsynchronousChannel`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(Int32, System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, Int32, System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsFull 'get ' : 
    Boolean IsChunkBufferEmpty 'get ' : 
    Boolean IsDone 'get ' : 
  Methods:
    get_IsFull(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsChunkBufferEmpty(): PrivateScope, Assembly, HideBySig, SpecialName
    get_IsDone(): PrivateScope, Assembly, HideBySig, SpecialName
    FlushBuffers(): PrivateScope, Assembly, HideBySig
    SetDone(): PrivateScope, Assembly, HideBySig
    Enqueue(T): PrivateScope, Assembly, HideBySig
    TryDequeue(T&): PrivateScope, Assembly, HideBySig
    TryDequeue(T&, ManualResetEventSlim&): PrivateScope, Assembly, HideBySig
    DoneWithDequeueWait(): PrivateScope, Assembly, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.SynchronousChannel`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Count 'get ' : 
  Methods:
    Init(): PrivateScope, Assembly, HideBySig
    Enqueue(T): PrivateScope, Assembly, HideBySig
    Dequeue(): PrivateScope, Assembly, HideBySig
    SetDone(): PrivateScope, Assembly, HideBySig
    CopyTo(T[], Int32): PrivateScope, Assembly, HideBySig
    get_Count(): PrivateScope, Assembly, HideBySig, SpecialName
Class System.Linq.AggregationMinMaxHelpers`1[T]: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Type parameter: T
  Methods:
    ReduceMin(IEnumerable`1): PrivateScope, Assembly, Static, HideBySig
    ReduceMax(IEnumerable`1): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.ParallelQuery: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(System.Linq.Parallel.QuerySettings): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.IEnumerable
  Properties:
    System.Linq.Parallel.QuerySettings SpecifiedQuerySettings 'get ' : 
  Methods:
    get_SpecifiedQuerySettings(): PrivateScope, Assembly, HideBySig, SpecialName
    Cast(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    OfType(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    GetEnumeratorUntyped(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
Class System.Linq.ParallelQuery`1[TSource]: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.ParallelQuery
    Void .ctor(System.Linq.Parallel.QuerySettings): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEnumerable`1[TSource]
  Methods:
    Cast(): PrivateScope, Assembly, Final, Virtual, HideBySig
    OfType(): PrivateScope, Assembly, Final, Virtual, HideBySig
    GetEnumeratorUntyped(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.EmptyEnumerable`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
  :System.Linq.ParallelQuery`1[T]
  Properties:
    System.Linq.Parallel.EmptyEnumerable`1[T] Instance 'get ' : 
  Methods:
    get_Instance(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
Class System.Linq.Parallel.QueryOperatorEnumerator`2[TElement,TKey]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TElement
  Type parameter: TKey
  Methods:
    MoveNext(TElement&, TKey&): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Reset(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    AsClassicEnumerator(): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.EmptyEnumerator`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.QueryOperatorEnumerator`2[T,System.Int32]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEnumerator`1[T]
    System.IDisposable
    System.Collections.IEnumerator
  Properties:
    T Current  'get ' : 
  Methods:
    MoveNext(T&, Int32&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_Current(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    MoveNext(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.EnumerableWrapperWeakToStrong: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(System.Collections.IEnumerable): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEnumerable`1[System.Object]
    System.Collections.IEnumerable
  Methods:
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Interface System.Linq.Parallel.IParallelPartitionable`1[T]: AutoLayout, AnsiClass, Class, ClassSemanticsMask, Abstract
  Type parameter: T
  Methods:
    GetPartitions(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class System.Linq.Parallel.ParallelEnumerableWrapper: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Linq.ParallelQuery`1[System.Object]
    Void .ctor(System.Collections.IEnumerable): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    GetEnumeratorUntyped(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
Class System.Linq.Parallel.ParallelEnumerableWrapper`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
  :System.Linq.ParallelQuery`1[T]
    Void .ctor(System.Collections.Generic.IEnumerable`1[T]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Collections.Generic.IEnumerable`1[T] WrappedEnumerable 'get ' : 
  Methods:
    get_WrappedEnumerable(): PrivateScope, Assembly, HideBySig, SpecialName
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
Struct System.Linq.Parallel.QueryAggregationOptions: AutoLayout, AnsiClass, Class, Sealed
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Linq.Parallel.QueryAggregationOptions None = 0 : Public, Static, Literal, HasDefault
    System.Linq.Parallel.QueryAggregationOptions Associative = 1 : Public, Static, Literal, HasDefault
    System.Linq.Parallel.QueryAggregationOptions Commutative = 2 : Public, Static, Literal, HasDefault
    System.Linq.Parallel.QueryAggregationOptions AssociativeCommutative = 3 : Public, Static, Literal, HasDefault
Class System.Linq.Parallel.RangeEnumerable: AutoLayout, AnsiClass, Class, BeforeFieldInit
  :System.Linq.ParallelQuery`1[System.Int32]
    Void .ctor(Int32, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IParallelPartitionable`1[System.Int32]
  Methods:
    GetPartitions(Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
Class System.Linq.Parallel.RepeatEnumerable`1[TResult]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TResult
  :System.Linq.ParallelQuery`1[TResult]
    Void .ctor(TResult, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IParallelPartitionable`1[TResult]
  Methods:
    GetPartitions(Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
Interface System.Linq.Parallel.IMergeHelper`1[TInputOutput]: AutoLayout, AnsiClass, Class, ClassSemanticsMask, Abstract
  Type parameter: TInputOutput
  Methods:
    Execute(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    GetResultsAsArray(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class System.Linq.Parallel.ArrayMergeHelper`1[TInputOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
    Void .ctor(System.Linq.Parallel.QuerySettings, System.Linq.Parallel.QueryResults`1[TInputOutput]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IMergeHelper`1[TInputOutput]
  Methods:
    Execute(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetResultsAsArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.MergeEnumerator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TInputOutput
  Interfaces:
    System.Collections.Generic.IEnumerator`1[TInputOutput]
    System.IDisposable
    System.Collections.IEnumerator
  Properties:
    TInputOutput Current 'get ' : 
  Methods:
    get_Current(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    MoveNext(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Reset(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Dispose(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.MergeEnumerator`1[T]
    Void .ctor(System.Linq.Parallel.QueryTaskGroupState, System.Linq.Parallel.AsynchronousChannel`1[T][]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    T Current  'get ' : 
  Methods:
    get_Current(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    MoveNext(): PrivateScope, Public, Virtual, HideBySig
Class System.Linq.Parallel.DefaultMergeHelper`2[TInputOutput,TIgnoreKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TIgnoreKey
    Void .ctor(System.Linq.Parallel.PartitionedStream`2[TInputOutput,TIgnoreKey], Boolean, System.Linq.ParallelMergeOptions, System.Threading.Tasks.TaskScheduler, System.Linq.Parallel.CancellationState, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IMergeHelper`1[TInputOutput]
  Methods:
    GetResultsAsArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.MergeExecutor`1[TInputOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Interfaces:
    System.Collections.Generic.IEnumerable`1[TInputOutput]
    System.Collections.IEnumerable
  Methods:
    Execute(PartitionedStream`2, Boolean, ParallelMergeOptions, TaskScheduler, Boolean, CancellationState, Int32): PrivateScope, Assembly, Static, HideBySig
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetResultsAsArray(): PrivateScope, Assembly, HideBySig
    MakeAsynchronousChannels(Int32, ParallelMergeOptions, CancellationToken): PrivateScope, Assembly, Static, HideBySig
    MakeSynchronousChannels(Int32): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.OrderPreservingMergeHelper`2[TInputOutput,TKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TKey
    Void .ctor(System.Linq.Parallel.PartitionedStream`2[TInputOutput,TKey], System.Threading.Tasks.TaskScheduler, System.Linq.Parallel.CancellationState, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IMergeHelper`1[TInputOutput]
  Methods:
    GetResultsAsArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1[TOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TOutput
    Void .ctor(System.Linq.Parallel.PartitionedStream`2[TOutput,System.Int32], System.Threading.Tasks.TaskScheduler, System.Linq.Parallel.CancellationState, Boolean, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IMergeHelper`1[TOutput]
  Fields:
    Int32 INITIAL_BUFFER_SIZE = 128 : Assembly, Static, Literal, HasDefault
    Int32 STEAL_BUFFER_SIZE = 1024 : Assembly, Static, Literal, HasDefault
    Int32 MAX_BUFFER_SIZE = 8192 : Assembly, Static, Literal, HasDefault
  Methods:
    GetResultsAsArray(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.SynchronousChannelMergeEnumerator`1[T]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.MergeEnumerator`1[T]
    Void .ctor(System.Linq.Parallel.QueryTaskGroupState, System.Linq.Parallel.SynchronousChannel`1[T][]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    T Current  'get ' : 
  Methods:
    get_Current(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    MoveNext(): PrivateScope, Public, Virtual, HideBySig
Class System.Linq.Parallel.HashRepartitionEnumerator`3[TInputOutput,THashKey,TIgnoreKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: THashKey
  Type parameter: TIgnoreKey
  :System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TInputOutput,THashKey],System.Int32]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TIgnoreKey], Int32, Int32, System.Func`2[TInputOutput,THashKey], System.Linq.Parallel.HashRepartitionStream`3[TInputOutput,THashKey,System.Int32], System.Threading.CountdownEvent, System.Linq.Parallel.ListChunk`1[System.Linq.Parallel.Pair`2[TInputOutput,THashKey]][,], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(Pair`2&, Int32&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.PartitionedStream`2[TElement,TKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TElement
  Type parameter: TKey
    Void .ctor(Int32, System.Collections.Generic.IComparer`1[TKey], System.Linq.Parallel.OrdinalIndexState): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.QueryOperatorEnumerator`2[TElement,TKey] Item [Int32] 'get set' : 
    Int32 PartitionCount 'get ' : 
    System.Collections.Generic.IComparer`1[TKey] KeyComparer 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
  Methods:
    get_Item(Int32): PrivateScope, Assembly, HideBySig, SpecialName
    set_Item(Int32, QueryOperatorEnumerator`2): PrivateScope, Assembly, HideBySig, SpecialName
    get_PartitionCount(): PrivateScope, Public, HideBySig, SpecialName
    get_KeyComparer(): PrivateScope, Assembly, HideBySig, SpecialName
    get_OrdinalIndexState(): PrivateScope, Assembly, HideBySig, SpecialName
Class System.Linq.Parallel.HashRepartitionStream`3[TInputOutput,THashKey,TOrderKey]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: THashKey
  Type parameter: TOrderKey
  :System.Linq.Parallel.PartitionedStream`2[System.Linq.Parallel.Pair`2[TInputOutput,THashKey],TOrderKey]
    Void .ctor(Int32, System.Collections.Generic.IComparer`1[TOrderKey], System.Collections.Generic.IEqualityComparer`1[THashKey], System.Collections.Generic.IEqualityComparer`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    GetHashCode(TInputOutput): PrivateScope, Assembly, HideBySig
    GetHashCode(THashKey): PrivateScope, Assembly, HideBySig
Interface System.Linq.Parallel.IPartitionedStreamRecipient`1[TElement]: AutoLayout, AnsiClass, Class, ClassSemanticsMask, Abstract
  Type parameter: TElement
  Methods:
    Receive(PartitionedStream`2): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3[TInputOutput,THashKey,TOrderKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: THashKey
  Type parameter: TOrderKey
  :System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TInputOutput,THashKey],TOrderKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TOrderKey], Int32, Int32, System.Func`2[TInputOutput,THashKey], System.Linq.Parallel.OrderedHashRepartitionStream`3[TInputOutput,THashKey,TOrderKey], System.Threading.CountdownEvent, System.Linq.Parallel.ListChunk`1[System.Linq.Parallel.Pair`2[TInputOutput,THashKey]][,], System.Linq.Parallel.ListChunk`1[TOrderKey][,], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(Pair`2&, TOrderKey&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.OrderedHashRepartitionStream`3[TInputOutput,THashKey,TOrderKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: THashKey
  Type parameter: TOrderKey
  :System.Linq.Parallel.HashRepartitionStream`3[TInputOutput,THashKey,TOrderKey]
    Void .ctor(System.Linq.Parallel.PartitionedStream`2[TInputOutput,TOrderKey], System.Func`2[TInputOutput,THashKey], System.Collections.Generic.IEqualityComparer`1[THashKey], System.Collections.Generic.IEqualityComparer`1[TInputOutput], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.PartitionedDataSource`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.PartitionedStream`2[T,System.Int32]
    Void .ctor(System.Collections.Generic.IEnumerable`1[T], Int32, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.PartitionedDataSource`1+ArrayIndexRangeEnumerator[T]: AutoLayout, AnsiClass, Class, NestedAssembly, Sealed, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.QueryOperatorEnumerator`2[T,System.Int32]
    Void .ctor(T[], Int32, Int32, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(T&, Int32&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.PartitionedDataSource`1+ArrayContiguousIndexRangeEnumerator[T]: AutoLayout, AnsiClass, Class, NestedAssembly, Sealed, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.QueryOperatorEnumerator`2[T,System.Int32]
    Void .ctor(T[], Int32, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(T&, Int32&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.PartitionedDataSource`1+ListIndexRangeEnumerator[T]: AutoLayout, AnsiClass, Class, NestedAssembly, Sealed, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.QueryOperatorEnumerator`2[T,System.Int32]
    Void .ctor(System.Collections.Generic.IList`1[T], Int32, Int32, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(T&, Int32&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.PartitionedDataSource`1+ListContiguousIndexRangeEnumerator[T]: AutoLayout, AnsiClass, Class, NestedAssembly, Sealed, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.QueryOperatorEnumerator`2[T,System.Int32]
    Void .ctor(System.Collections.Generic.IList`1[T], Int32, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(T&, Int32&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.UnorderedHashRepartitionStream`3[TInputOutput,THashKey,TIgnoreKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: THashKey
  Type parameter: TIgnoreKey
  :System.Linq.Parallel.HashRepartitionStream`3[TInputOutput,THashKey,System.Int32]
    Void .ctor(System.Linq.Parallel.PartitionedStream`2[TInputOutput,TIgnoreKey], System.Func`2[TInputOutput,THashKey], System.Collections.Generic.IEqualityComparer`1[THashKey], System.Collections.Generic.IEqualityComparer`1[TInputOutput], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.QueryOperator`1[TOutput]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TOutput
  :System.Linq.ParallelQuery`1[TOutput]
    Void .ctor(System.Linq.Parallel.QuerySettings): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean, System.Linq.Parallel.QuerySettings): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean OutputOrdered 'get ' : 
    Boolean LimitsParallelism 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
    GetEnumerator(Nullable`1): PrivateScope, Public, HideBySig
    get_OutputOrdered(): PrivateScope, Assembly, HideBySig, SpecialName
    GetEnumerator(Nullable`1, Boolean): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    GetOpenedEnumerator(Nullable`1, Boolean, Boolean, QuerySettings): PrivateScope, Assembly, HideBySig
    ExecuteAndGetResultsAsArray(): PrivateScope, Assembly, HideBySig
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract, SpecialName
    get_OrdinalIndexState(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract, SpecialName
    ExecuteAndCollectResults(PartitionedStream`2, Int32, Boolean, Boolean, QuerySettings): PrivateScope, Assembly, Static, HideBySig
    AsQueryOperator(IEnumerable`1): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.UnaryQueryOperator`2[TInput,TOutput]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TInput
  Type parameter: TOutput
  :System.Linq.Parallel.QueryOperator`1[TOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Linq.Parallel.QueryOperator`1[TInput], Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.QueryOperator`1[TInput] Child 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
  Methods:
    get_Child(): PrivateScope, Assembly, HideBySig, SpecialName
    get_OrdinalIndexState(): PrivateScope, Assembly, Final, Virtual, HideBySig, SpecialName
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract
Class System.Linq.Parallel.QueryResults`1[T]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: T
  Interfaces:
    System.Collections.Generic.IList`1[T]
    System.Collections.Generic.ICollection`1[T]
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
  Properties:
    Boolean IsIndexible 'get ' : 
    Int32 ElementsCount 'get ' : 
    T Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
  Methods:
    GivePartitionedStream(IPartitionedStreamRecipient`1): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract
    get_IsIndexible(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    GetElement(Int32): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride
    get_ElementsCount(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, SpecialName
    get_Item(Int32): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    set_Item(Int32, T): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
Class System.Linq.Parallel.UnaryQueryOperator`2+UnaryQueryOperatorResults[TInput,TOutput]: AutoLayout, AnsiClass, Class, NestedAssembly, BeforeFieldInit
  Type parameter: TInput
  Type parameter: TOutput
  :System.Linq.Parallel.QueryResults`1[TOutput]
    Void .ctor(System.Linq.Parallel.QueryResults`1[TInput], System.Linq.Parallel.UnaryQueryOperator`2[TInput,TOutput], System.Linq.Parallel.QuerySettings, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    GivePartitionedStream(IPartitionedStreamRecipient`1): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.AssociativeAggregationOperator`3[TInput,TIntermediate,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInput
  Type parameter: TIntermediate
  Type parameter: TOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInput,TIntermediate]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], TIntermediate, System.Func`1[TIntermediate], Boolean, System.Func`3[TIntermediate,TInput,TIntermediate], System.Func`3[TIntermediate,TIntermediate,TIntermediate], System.Func`2[TIntermediate,TOutput], Boolean, System.Linq.Parallel.QueryAggregationOptions): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Aggregate(): PrivateScope, Assembly, HideBySig
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.PartitionerQueryOperator`1[TElement]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TElement
  :System.Linq.Parallel.QueryOperator`1[TElement]
    Void .ctor(System.Collections.Concurrent.Partitioner`1[TElement]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean Orderable 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
    Boolean LimitsParallelism 'get ' : 
  Methods:
    get_Orderable(): PrivateScope, Assembly, HideBySig, SpecialName
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_OrdinalIndexState(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    GetOrdinalIndexState(Partitioner`1): PrivateScope, Assembly, Static, HideBySig
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.ScanQueryOperator`1[TElement]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TElement
  :System.Linq.Parallel.QueryOperator`1[TElement]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TElement]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Collections.Generic.IEnumerable`1[TElement] Data 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
    Boolean LimitsParallelism 'get ' : 
  Methods:
    get_Data(): PrivateScope, Public, HideBySig, SpecialName
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    GetEnumerator(Nullable`1, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_OrdinalIndexState(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.BinaryQueryOperator`3[TLeftInput,TRightInput,TOutput]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TOutput
  :System.Linq.Parallel.QueryOperator`1[TOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TLeftInput], System.Linq.ParallelQuery`1[TRightInput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Linq.Parallel.QueryOperator`1[TLeftInput], System.Linq.Parallel.QueryOperator`1[TRightInput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.QueryOperator`1[TLeftInput] LeftChild 'get ' : 
    System.Linq.Parallel.QueryOperator`1[TRightInput] RightChild 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
  Methods:
    get_LeftChild(): PrivateScope, Assembly, HideBySig, SpecialName
    get_RightChild(): PrivateScope, Assembly, HideBySig, SpecialName
    get_OrdinalIndexState(): PrivateScope, Assembly, Final, Virtual, HideBySig, SpecialName
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class System.Linq.Parallel.BinaryQueryOperator`3+BinaryQueryOperatorResults[TLeftInput,TRightInput,TOutput]: AutoLayout, AnsiClass, Class, NestedAssembly, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TOutput
  :System.Linq.Parallel.QueryResults`1[TOutput]
    Void .ctor(System.Linq.Parallel.QueryResults`1[TLeftInput], System.Linq.Parallel.QueryResults`1[TRightInput], System.Linq.Parallel.BinaryQueryOperator`3[TLeftInput,TRightInput,TOutput], System.Linq.Parallel.QuerySettings, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    GivePartitionedStream(IPartitionedStreamRecipient`1): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.ExceptQueryOperator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  :System.Linq.Parallel.BinaryQueryOperator`3[TInputOutput,TInputOutput,TInputOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TInputOutput], System.Linq.ParallelQuery`1[TInputOutput], System.Collections.Generic.IEqualityComparer`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.GroupJoinQueryOperator`4[TLeftInput,TRightInput,TKey,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TKey
  Type parameter: TOutput
  :System.Linq.Parallel.BinaryQueryOperator`3[TLeftInput,TRightInput,TOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TLeftInput], System.Linq.ParallelQuery`1[TRightInput], System.Func`2[TLeftInput,TKey], System.Func`2[TRightInput,TKey], System.Func`3[TLeftInput,System.Collections.Generic.IEnumerable`1[TRightInput],TOutput], System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5[TLeftInput,TLeftKey,TRightInput,THashKey,TOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TLeftKey
  Type parameter: TRightInput
  Type parameter: THashKey
  Type parameter: TOutput
  :System.Linq.Parallel.QueryOperatorEnumerator`2[TOutput,TLeftKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TLeftInput,THashKey],TLeftKey], System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TRightInput,THashKey],System.Int32], System.Func`3[TLeftInput,TRightInput,TOutput], System.Func`3[TLeftInput,System.Collections.Generic.IEnumerable`1[TRightInput],TOutput], System.Collections.Generic.IEqualityComparer`1[THashKey], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(TOutput&, TLeftKey&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.IntersectQueryOperator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  :System.Linq.Parallel.BinaryQueryOperator`3[TInputOutput,TInputOutput,TInputOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TInputOutput], System.Linq.ParallelQuery`1[TInputOutput], System.Collections.Generic.IEqualityComparer`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.JoinQueryOperator`4[TLeftInput,TRightInput,TKey,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TKey
  Type parameter: TOutput
  :System.Linq.Parallel.BinaryQueryOperator`3[TLeftInput,TRightInput,TOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TLeftInput], System.Linq.ParallelQuery`1[TRightInput], System.Func`2[TLeftInput,TKey], System.Func`2[TRightInput,TKey], System.Func`3[TLeftInput,TRightInput,TOutput], System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.UnionQueryOperator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  :System.Linq.Parallel.BinaryQueryOperator`3[TInputOutput,TInputOutput,TInputOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TInputOutput], System.Linq.ParallelQuery`1[TInputOutput], System.Collections.Generic.IEqualityComparer`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.ZipQueryOperator`3[TLeftInput,TRightInput,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TOutput
  :System.Linq.Parallel.QueryOperator`1[TOutput]
    Void .ctor(System.Linq.ParallelQuery`1[TLeftInput], System.Collections.Generic.IEnumerable`1[TRightInput], System.Func`3[TLeftInput,TRightInput,TOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_OrdinalIndexState(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.ZipQueryOperator`3+ZipQueryOperatorResults[TLeftInput,TRightInput,TOutput]: AutoLayout, AnsiClass, Class, NestedAssembly, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TOutput
  :System.Linq.Parallel.QueryResults`1[TOutput]
    Void .ctor(System.Linq.Parallel.QueryResults`1[TLeftInput], System.Linq.Parallel.QueryResults`1[TRightInput], System.Func`3[TLeftInput,TRightInput,TOutput], Int32, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 ElementsCount 'get ' : 
    Boolean IsIndexible 'get ' : 
  Methods:
    get_ElementsCount(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_IsIndexible(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    GetElement(Int32): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    GivePartitionedStream(IPartitionedStreamRecipient`1): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.PartitionedStreamMerger`1[TOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TOutput
    Void .ctor(Boolean, System.Linq.ParallelMergeOptions, System.Threading.Tasks.TaskScheduler, Boolean, System.Linq.Parallel.CancellationState, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.Parallel.IPartitionedStreamRecipient`1[TOutput]
  Properties:
    System.Linq.Parallel.MergeExecutor`1[TOutput] MergeExecutor 'get ' : 
  Methods:
    get_MergeExecutor(): PrivateScope, Assembly, HideBySig, SpecialName
    Receive(PartitionedStream`2): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.QueryOpeningEnumerator`1[TOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TOutput
    Void .ctor(System.Linq.Parallel.QueryOperator`1[TOutput], System.Nullable`1[System.Linq.ParallelMergeOptions], Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEnumerator`1[TOutput]
    System.IDisposable
    System.Collections.IEnumerator
  Properties:
    TOutput Current 'get ' : 
  Methods:
    get_Current(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    MoveNext(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Reset(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.InlinedAggregationOperator`3[TSource,TIntermediate,TResult]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TIntermediate
  Type parameter: TResult
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TIntermediate]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Aggregate(): PrivateScope, Assembly, HideBySig
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.CountAggregationOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.InlinedAggregationOperator`3[TSource,System.Int32,System.Int32]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1[TIntermediate]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TIntermediate
  :System.Linq.Parallel.QueryOperatorEnumerator`2[TIntermediate,System.Int32]
    Void .ctor(Int32, System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    MoveNext(TIntermediate&, Int32&): PrivateScope, Assembly, Final, Virtual, HideBySig
Class System.Linq.Parallel.DecimalAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Decimal,System.Linq.Parallel.Pair`2[System.Decimal,System.Int64],System.Decimal]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Decimal]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.DecimalMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Decimal,System.Decimal,System.Decimal]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Decimal], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.DecimalSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Decimal,System.Decimal,System.Decimal]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Decimal]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.DoubleAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Double,System.Linq.Parallel.Pair`2[System.Double,System.Int64],System.Double]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Double]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.DoubleMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Double,System.Double,System.Double]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Double], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.DoubleSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Double,System.Double,System.Double]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Double]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.FloatAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Single,System.Linq.Parallel.Pair`2[System.Double,System.Int64],System.Single]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Single]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.FloatMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Single,System.Single,System.Single]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Single], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.FloatSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Single,System.Double,System.Single]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Single]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.IntAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Int32,System.Linq.Parallel.Pair`2[System.Int64,System.Int64],System.Double]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Int32]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.IntMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Int32,System.Int32,System.Int32]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Int32], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.IntSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Int32,System.Int32,System.Int32]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Int32]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.LongAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Int64,System.Linq.Parallel.Pair`2[System.Int64,System.Int64],System.Double]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Int64]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.LongCountAggregationOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.InlinedAggregationOperator`3[TSource,System.Int64,System.Int64]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.LongMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Int64,System.Int64,System.Int64]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Int64], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.LongSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Int64,System.Int64,System.Int64]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Int64]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableDecimalAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Decimal],System.Linq.Parallel.Pair`2[System.Decimal,System.Int64],System.Nullable`1[System.Decimal]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Decimal],System.Nullable`1[System.Decimal],System.Nullable`1[System.Decimal]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableDecimalSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Decimal],System.Nullable`1[System.Decimal],System.Nullable`1[System.Decimal]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Decimal]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableDoubleAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Double],System.Linq.Parallel.Pair`2[System.Double,System.Int64],System.Nullable`1[System.Double]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Double],System.Nullable`1[System.Double],System.Nullable`1[System.Double]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableDoubleSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Double],System.Nullable`1[System.Double],System.Nullable`1[System.Double]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Double]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableFloatAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Single],System.Linq.Parallel.Pair`2[System.Double,System.Int64],System.Nullable`1[System.Single]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Single],System.Nullable`1[System.Single],System.Nullable`1[System.Single]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableFloatSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Single],System.Nullable`1[System.Double],System.Nullable`1[System.Single]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Single]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableIntAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Int32],System.Linq.Parallel.Pair`2[System.Int64,System.Int64],System.Nullable`1[System.Double]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableIntMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Int32],System.Nullable`1[System.Int32],System.Nullable`1[System.Int32]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableIntSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Int32],System.Nullable`1[System.Int32],System.Nullable`1[System.Int32]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int32]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableLongAverageAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Int64],System.Linq.Parallel.Pair`2[System.Int64,System.Int64],System.Nullable`1[System.Double]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableLongMinMaxAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Int64],System.Nullable`1[System.Int64],System.Nullable`1[System.Int64]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.NullableLongSumAggregationOperator: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  :System.Linq.Parallel.InlinedAggregationOperator`3[System.Nullable`1[System.Int64],System.Nullable`1[System.Int64],System.Nullable`1[System.Int64]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[System.Nullable`1[System.Int64]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.ListQueryResults`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
  :System.Linq.Parallel.QueryResults`1[T]
    Void .ctor(System.Collections.Generic.IList`1[T], Int32, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean IsIndexible 'get ' : 
    Int32 ElementsCount 'get ' : 
  Methods:
    GivePartitionedStream(IPartitionedStreamRecipient`1): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_IsIndexible(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_ElementsCount(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    GetElement(Int32): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    GetPartitionedStream(): PrivateScope, Assembly, HideBySig
Struct System.Linq.Parallel.OrdinalIndexState: AutoLayout, AnsiClass, Class, Sealed
  :System.Enum
  Fields:
    Byte value__ : Public, SpecialName, RTSpecialName
    System.Linq.Parallel.OrdinalIndexState Indexible = 0 : Public, Static, Literal, HasDefault
    System.Linq.Parallel.OrdinalIndexState Correct = 1 : Public, Static, Literal, HasDefault
    System.Linq.Parallel.OrdinalIndexState Increasing = 2 : Public, Static, Literal, HasDefault
    System.Linq.Parallel.OrdinalIndexState Shuffled = 3 : Public, Static, Literal, HasDefault
Struct System.Linq.Parallel.QuerySettings: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
    Void .ctor(System.Threading.Tasks.TaskScheduler, System.Nullable`1[System.Int32], System.Threading.CancellationToken, System.Nullable`1[System.Linq.ParallelExecutionMode], System.Nullable`1[System.Linq.ParallelMergeOptions]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.CancellationState CancellationState 'get set' : 
    System.Threading.Tasks.TaskScheduler TaskScheduler 'get set' : 
    System.Nullable`1[System.Int32] DegreeOfParallelism 'get set' : 
    System.Nullable`1[System.Linq.ParallelExecutionMode] ExecutionMode 'get set' : 
    System.Nullable`1[System.Linq.ParallelMergeOptions] MergeOptions 'get set' : 
    Int32 QueryId 'get ' : 
    System.Linq.Parallel.QuerySettings Empty 'get ' : 
  Methods:
    get_CancellationState(): PrivateScope, Assembly, HideBySig, SpecialName
    set_CancellationState(CancellationState): PrivateScope, Assembly, HideBySig, SpecialName
    get_TaskScheduler(): PrivateScope, Assembly, HideBySig, SpecialName
    set_TaskScheduler(TaskScheduler): PrivateScope, Assembly, HideBySig, SpecialName
    get_DegreeOfParallelism(): PrivateScope, Assembly, HideBySig, SpecialName
    set_DegreeOfParallelism(Nullable`1): PrivateScope, Assembly, HideBySig, SpecialName
    get_ExecutionMode(): PrivateScope, Assembly, HideBySig, SpecialName
    set_ExecutionMode(Nullable`1): PrivateScope, Assembly, HideBySig, SpecialName
    get_MergeOptions(): PrivateScope, Assembly, HideBySig, SpecialName
    set_MergeOptions(Nullable`1): PrivateScope, Assembly, HideBySig, SpecialName
    get_QueryId(): PrivateScope, Assembly, HideBySig, SpecialName
    Merge(QuerySettings): PrivateScope, Assembly, HideBySig
    WithPerExecutionSettings(): PrivateScope, Assembly, HideBySig
    WithPerExecutionSettings(CancellationTokenSource, Shared`1): PrivateScope, Assembly, HideBySig
    WithDefaults(): PrivateScope, Assembly, HideBySig
    get_Empty(): PrivateScope, Assembly, Static, HideBySig, SpecialName
    CleanStateAtQueryEnd(): PrivateScope, Public, HideBySig
Class System.Linq.Parallel.OrderingQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.QueryOperator`1[TSource]
    Void .ctor(System.Linq.Parallel.QueryOperator`1[TSource], Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    GetEnumerator(Nullable`1, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_OrdinalIndexState(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.QueryExecutionOption`1[TSource]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.QueryOperator`1[TSource]
    Void .ctor(System.Linq.Parallel.QueryOperator`1[TSource], System.Linq.Parallel.QuerySettings): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.OrdinalIndexState OrdinalIndexState 'get ' : 
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_OrdinalIndexState(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.AnyAllSearchOperator`1[TInput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInput,System.Boolean]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], Boolean, System.Func`2[TInput,System.Boolean]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Aggregate(): PrivateScope, Assembly, HideBySig
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.ConcatQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.BinaryQueryOperator`3[TSource,TSource,TSource]
    Void .ctor(System.Linq.ParallelQuery`1[TSource], System.Linq.ParallelQuery`1[TSource]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Public, Virtual, HideBySig
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Struct System.Linq.Parallel.ConcatKey`2[TLeftKey,TRightKey]: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: TLeftKey
  Type parameter: TRightKey
  :System.ValueType
  Methods:
    MakeLeft(TLeftKey): PrivateScope, Assembly, Static, HideBySig
    MakeRight(TRightKey): PrivateScope, Assembly, Static, HideBySig
    MakeComparer(IComparer`1, IComparer`1): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.ContainsSearchOperator`1[TInput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInput,System.Boolean]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], TInput, System.Collections.Generic.IEqualityComparer`1[TInput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Aggregate(): PrivateScope, Assembly, HideBySig
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TSource]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource], TSource): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.DistinctQueryOperator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInputOutput,TInputOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInputOutput], System.Collections.Generic.IEqualityComparer`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.ElementAtQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TSource]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource], Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    Aggregate(TSource&(Out), Boolean): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.FirstQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TSource]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.ForAllOperator`1[TInput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInput,TInput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], System.Action`1[TInput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    RunSynchronously(): PrivateScope, Assembly, HideBySig
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.GroupByQueryOperator`3[TSource,TGroupKey,TElement]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TElement
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,System.Linq.IGrouping`2[TGroupKey,TElement]]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,TGroupKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TGroupKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4[TSource,TGroupKey,TElement,TOrderKey]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TElement
  Type parameter: TOrderKey
  :System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.IGrouping`2[TGroupKey,TElement],TOrderKey]
  Methods:
    MoveNext(IGrouping`2&, TOrderKey&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3[TSource,TGroupKey,TOrderKey]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TOrderKey
  :System.Linq.Parallel.GroupByQueryOperatorEnumerator`4[TSource,TGroupKey,TSource,TOrderKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TSource,TGroupKey],TOrderKey], System.Collections.Generic.IEqualityComparer`1[TGroupKey], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4[TSource,TGroupKey,TElement,TOrderKey]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TElement
  Type parameter: TOrderKey
  :System.Linq.Parallel.GroupByQueryOperatorEnumerator`4[TSource,TGroupKey,TElement,TOrderKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TSource,TGroupKey],TOrderKey], System.Collections.Generic.IEqualityComparer`1[TGroupKey], System.Func`2[TSource,TElement], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4[TSource,TGroupKey,TElement,TOrderKey]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TElement
  Type parameter: TOrderKey
  :System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.IGrouping`2[TGroupKey,TElement],TOrderKey]
  Methods:
    MoveNext(IGrouping`2&, TOrderKey&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3[TSource,TGroupKey,TOrderKey]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TOrderKey
  :System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4[TSource,TGroupKey,TSource,TOrderKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TSource,TGroupKey],TOrderKey], System.Func`2[TSource,TGroupKey], System.Collections.Generic.IEqualityComparer`1[TGroupKey], System.Collections.Generic.IComparer`1[TOrderKey], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4[TSource,TGroupKey,TElement,TOrderKey]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  Type parameter: TGroupKey
  Type parameter: TElement
  Type parameter: TOrderKey
  :System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4[TSource,TGroupKey,TElement,TOrderKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[System.Linq.Parallel.Pair`2[TSource,TGroupKey],TOrderKey], System.Func`2[TSource,TGroupKey], System.Func`2[TSource,TElement], System.Collections.Generic.IEqualityComparer`1[TGroupKey], System.Collections.Generic.IComparer`1[TOrderKey], System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.GroupByGrouping`2[TGroupKey,TElement]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TGroupKey
  Type parameter: TElement
    Void .ctor(TGroupKey): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.KeyValuePair`2[System.Linq.Parallel.Wrapper`1[TGroupKey],System.Linq.Parallel.ListChunk`1[TElement]]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.IGrouping`2[TGroupKey,TElement]
    System.Collections.Generic.IEnumerable`1[TElement]
    System.Collections.IEnumerable
  Methods:
    Add(TElement): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.OrderedGroupByGrouping`3[TGroupKey,TOrderKey,TElement]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TGroupKey
  Type parameter: TOrderKey
  Type parameter: TElement
    Void .ctor(TGroupKey, System.Collections.Generic.IComparer`1[TOrderKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.IGrouping`2[TGroupKey,TElement]
    System.Collections.Generic.IEnumerable`1[TElement]
    System.Collections.IEnumerable
  Methods:
    Add(TElement, TOrderKey): PrivateScope, Assembly, HideBySig
    DoneAdding(): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.IndexedSelectQueryOperator`2[TInput,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInput
  Type parameter: TOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInput,TOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], System.Func`3[TInput,System.Int32,TOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.IndexedWhereQueryOperator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInputOutput,TInputOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInputOutput], System.Func`3[TInputOutput,System.Int32,System.Boolean]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.LastQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TSource]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.ReverseQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TSource]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.SelectManyQueryOperator`3[TLeftInput,TRightInput,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TLeftInput
  Type parameter: TRightInput
  Type parameter: TOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TLeftInput,TOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TLeftInput], System.Func`2[TLeftInput,System.Collections.Generic.IEnumerable`1[TRightInput]], System.Func`3[TLeftInput,System.Int32,System.Collections.Generic.IEnumerable`1[TRightInput]], System.Func`3[TLeftInput,TRightInput,TOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.SelectQueryOperator`2[TInput,TOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInput
  Type parameter: TOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInput,TOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInput], System.Func`2[TInput,TOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.SingleQueryOperator`1[TSource]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.Parallel.UnaryQueryOperator`2[TSource,TSource]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TSource], System.Func`2[TSource,System.Boolean]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.SortQueryOperator`2[TInputOutput,TSortKey]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TSortKey
  :System.Linq.Parallel.UnaryQueryOperator`2[TInputOutput,TInputOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInputOutput], System.Func`2[TInputOutput,TSortKey], System.Collections.Generic.IComparer`1[TSortKey], Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.IOrderedEnumerable`1[TInputOutput]
  Properties:
    System.Func`2[TInputOutput,TSortKey] KeySelector 'get ' : 
    System.Collections.Generic.IComparer`1[TSortKey] KeyComparer 'get ' : 
    Boolean LimitsParallelism 'get ' : 
  Methods:
    get_KeySelector(): PrivateScope, Assembly, HideBySig, SpecialName
    get_KeyComparer(): PrivateScope, Assembly, HideBySig, SpecialName
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.SortQueryOperatorResults`2[TInputOutput,TSortKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TSortKey
  :System.Linq.Parallel.QueryResults`1[TInputOutput]
    Void .ctor(System.Linq.Parallel.QueryResults`1[TInputOutput], System.Linq.Parallel.SortQueryOperator`2[TInputOutput,TSortKey], System.Linq.Parallel.QuerySettings, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean IsIndexible 'get ' : 
  Methods:
    get_IsIndexible(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    GivePartitionedStream(IPartitionedStreamRecipient`1): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.SortQueryOperatorEnumerator`3[TInputOutput,TKey,TSortKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TKey
  Type parameter: TSortKey
  :System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TSortKey]
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TKey], System.Func`2[TInputOutput,TSortKey], System.Collections.Generic.IComparer`1[TSortKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Collections.Generic.IComparer`1[TSortKey] KeyComparer 'get ' : 
  Methods:
    get_KeyComparer(): PrivateScope, Public, HideBySig, SpecialName
    MoveNext(TInputOutput&, TSortKey&): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.TakeOrSkipQueryOperator`1[TResult]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TResult
  :System.Linq.Parallel.UnaryQueryOperator`2[TResult,TResult]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TResult], Int32, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1[TResult]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TResult
  :System.Linq.Parallel.UnaryQueryOperator`2[TResult,TResult]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TResult], System.Func`2[TResult,System.Boolean], System.Func`3[TResult,System.Int32,System.Boolean], Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.WhereQueryOperator`1[TInputOutput]: AutoLayout, AnsiClass, Class, Sealed, BeforeFieldInit
  Type parameter: TInputOutput
  :System.Linq.Parallel.UnaryQueryOperator`2[TInputOutput,TInputOutput]
    Void .ctor(System.Collections.Generic.IEnumerable`1[TInputOutput], System.Func`2[TInputOutput,System.Boolean]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean LimitsParallelism 'get ' : 
  Methods:
    WrapPartitionedStream(PartitionedStream`2, IPartitionedStreamRecipient`1, Boolean, QuerySettings): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    Open(QuerySettings, Boolean): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    AsSequentialQuery(CancellationToken): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
    get_LimitsParallelism(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride, SpecialName
Class System.Linq.Parallel.CancellationState: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(System.Threading.CancellationToken): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    System.Threading.CancellationTokenSource InternalCancellationTokenSource : Assembly
    System.Threading.CancellationToken ExternalCancellationToken : Assembly
    System.Threading.CancellationTokenSource MergedCancellationTokenSource : Assembly
    System.Linq.Parallel.Shared`1[System.Boolean] TopLevelDisposedFlag : Assembly
    Int32 POLL_INTERVAL = 63 : Assembly, Static, Literal, HasDefault
  Properties:
    System.Threading.CancellationToken MergedCancellationToken 'get ' : 
  Methods:
    get_MergedCancellationToken(): PrivateScope, Assembly, HideBySig, SpecialName
    ThrowIfCanceled(CancellationToken): PrivateScope, Assembly, Static, HideBySig
    ThrowWithStandardMessageIfCanceled(CancellationToken): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.QueryTask: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Methods:
    RunSynchronously(TaskScheduler): PrivateScope, Assembly, HideBySig
    RunAsynchronously(TaskScheduler): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.SpoolingTaskBase: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  :System.Linq.Parallel.QueryTask
Class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1[TOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TOutput
  :System.Linq.Parallel.SpoolingTaskBase
    Void .ctor(System.Linq.Parallel.QueryOperatorEnumerator`2[TOutput,System.Int32], System.Linq.Parallel.QueryTaskGroupState, Boolean[], Boolean[], Boolean[], Int32, System.Collections.Generic.Queue`1[System.Linq.Parallel.Pair`2[System.Int32,TOutput]][], System.Object, System.Threading.Tasks.TaskScheduler, Boolean): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    Spool(QueryTaskGroupState, PartitionedStream`2, Boolean[], Boolean[], Boolean[], Queue`1[], Object[], TaskScheduler, Boolean): PrivateScope, Public, Static, HideBySig
Class System.Linq.Parallel.OrderPreservingSpoolingTask`2[TInputOutput,TKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TKey
  :System.Linq.Parallel.SpoolingTaskBase
  Methods:
    Spool(QueryTaskGroupState, PartitionedStream`2, Shared`1, TaskScheduler): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.QueryLifecycle: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    LogicalQueryExecutionBegin(Int32): PrivateScope, Assembly, Static, HideBySig
    LogicalQueryExecutionEnd(Int32): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.QueryTaskGroupState: AutoLayout, AnsiClass, Class, BeforeFieldInit
    Void .ctor(System.Linq.Parallel.CancellationState, Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean IsAlreadyEnded 'get ' : 
    System.Linq.Parallel.CancellationState CancellationState 'get ' : 
    Int32 QueryId 'get ' : 
  Methods:
    get_IsAlreadyEnded(): PrivateScope, Assembly, HideBySig, SpecialName
    get_CancellationState(): PrivateScope, Assembly, HideBySig, SpecialName
    get_QueryId(): PrivateScope, Assembly, HideBySig, SpecialName
    QueryBegin(Task): PrivateScope, Assembly, HideBySig
    QueryEnd(Boolean): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.Scheduling: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Fields:
    Int32 DefaultDegreeOfParallelism : Assembly, Static
    Boolean DefaultPreserveOrder = False : Assembly, Static, Literal, HasDefault
    Int32 DEFAULT_BOUNDED_BUFFER_CAPACITY = 512 : Assembly, Static, Literal, HasDefault
    Int32 DEFAULT_BYTES_PER_CHUNK = 512 : Assembly, Static, Literal, HasDefault
    Int32 ZOMBIED_PRODUCER_TIMEOUT = -1 : Assembly, Static, Literal, HasDefault
    Int32 MAX_SUPPORTED_DOP = 63 : Assembly, Static, Literal, HasDefault
  Methods:
    GetDefaultDegreeOfParallelism(): PrivateScope, Assembly, Static, HideBySig
    GetDefaultChunkSize(): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.SpoolingTask: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    SpoolStopAndGo(QueryTaskGroupState, PartitionedStream`2, SynchronousChannel`1[], TaskScheduler): PrivateScope, Assembly, Static, HideBySig
    SpoolPipeline(QueryTaskGroupState, PartitionedStream`2, AsynchronousChannel`1[], TaskScheduler): PrivateScope, Assembly, Static, HideBySig
    SpoolForAll(QueryTaskGroupState, PartitionedStream`2, TaskScheduler): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.StopAndGoSpoolingTask`2[TInputOutput,TIgnoreKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TIgnoreKey
  :System.Linq.Parallel.SpoolingTaskBase
    Void .ctor(Int32, System.Linq.Parallel.QueryTaskGroupState, System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TIgnoreKey], System.Linq.Parallel.SynchronousChannel`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.PipelineSpoolingTask`2[TInputOutput,TIgnoreKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TIgnoreKey
  :System.Linq.Parallel.SpoolingTaskBase
    Void .ctor(Int32, System.Linq.Parallel.QueryTaskGroupState, System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TIgnoreKey], System.Linq.Parallel.AsynchronousChannel`1[TInputOutput]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.ForAllSpoolingTask`2[TInputOutput,TIgnoreKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TIgnoreKey
  :System.Linq.Parallel.SpoolingTaskBase
    Void .ctor(Int32, System.Linq.Parallel.QueryTaskGroupState, System.Linq.Parallel.QueryOperatorEnumerator`2[TInputOutput,TIgnoreKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
Class System.Linq.Parallel.CancellableEnumerable: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    Wrap(IEnumerable`1, CancellationToken): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.ExceptionAggregator: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    WrapEnumerable(IEnumerable`1, CancellationState): PrivateScope, Assembly, Static, HideBySig
    WrapQueryEnumerator(QueryOperatorEnumerator`2, CancellationState): PrivateScope, Assembly, Static, HideBySig
    ThrowOCEorAggregateException(Exception, CancellationState): PrivateScope, Assembly, Static, HideBySig
    WrapFunc(Func`2, CancellationState): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.ExchangeUtilities: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    PartitionDataSource(IEnumerable`1, Int32, Boolean): PrivateScope, Assembly, Static, HideBySig
    HashRepartition(PartitionedStream`2, Func`2, IEqualityComparer`1, IEqualityComparer`1, CancellationToken): PrivateScope, Assembly, Static, HideBySig
    HashRepartitionOrdered(PartitionedStream`2, Func`2, IEqualityComparer`1, IEqualityComparer`1, CancellationToken): PrivateScope, Assembly, Static, HideBySig
    Worse(OrdinalIndexState, OrdinalIndexState): PrivateScope, Assembly, Static, HideBySig
    IsWorseThan(OrdinalIndexState, OrdinalIndexState): PrivateScope, Assembly, Static, HideBySig
Struct System.Linq.Parallel.NoKeyMemoizationRequired: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
Class System.Linq.Parallel.FixedMaxHeap`1[TElement]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TElement
    Void .ctor(Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, System.Collections.Generic.IComparer`1[TElement]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Count 'get ' : 
    Int32 Size 'get ' : 
    TElement MaxValue 'get ' : 
  Methods:
    get_Count(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Size(): PrivateScope, Assembly, HideBySig, SpecialName
    get_MaxValue(): PrivateScope, Assembly, HideBySig, SpecialName
    Clear(): PrivateScope, Assembly, HideBySig
    Insert(TElement): PrivateScope, Assembly, HideBySig
    ReplaceMax(TElement): PrivateScope, Assembly, HideBySig
    RemoveMax(): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.GrowingArray`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
    Void .ctor(): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    T[] InternalArray 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    get_InternalArray(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Count(): PrivateScope, Assembly, HideBySig, SpecialName
    Add(T): PrivateScope, Assembly, HideBySig
    CopyFrom(T[], Int32): PrivateScope, Assembly, HideBySig
Class System.Linq.Parallel.HashLookup`2[TKey,TValue]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TKey
  Type parameter: TValue
    Void .ctor(): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    TValue Item [TKey] 'set' : 
    Int32 Count 'get ' : 
    System.Collections.Generic.KeyValuePair`2[TKey,TValue] Item [Int32] 'get ' : 
  Methods:
    Add(TKey, TValue): PrivateScope, Assembly, HideBySig
    TryGetValue(TKey, TValue&): PrivateScope, Assembly, HideBySig
    set_Item(TKey, TValue): PrivateScope, Assembly, HideBySig, SpecialName
    Remove(TKey): PrivateScope, Assembly, HideBySig
    get_Count(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Assembly, HideBySig, SpecialName
Struct System.Linq.Parallel.HashLookup`2+Slot[TKey,TValue]: AutoLayout, AnsiClass, Class, NestedAssembly, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: TKey
  Type parameter: TValue
  :System.ValueType
  Fields:
    Int32 hashCode : Assembly
    TKey key : Assembly
    TValue value : Assembly
    Int32 next : Assembly
Class System.Linq.Parallel.ListChunk`1[TInputOutput]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
    Void .ctor(Int32): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEnumerable`1[TInputOutput]
    System.Collections.IEnumerable
  Fields:
    TInputOutput[] m_chunk : Assembly
  Properties:
    System.Linq.Parallel.ListChunk`1[TInputOutput] Next 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    Add(TInputOutput): PrivateScope, Assembly, HideBySig
    get_Next(): PrivateScope, Assembly, HideBySig, SpecialName
    get_Count(): PrivateScope, Assembly, HideBySig, SpecialName
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.Lookup`2[TKey,TElement]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TKey
  Type parameter: TElement
    Void .ctor(System.Collections.Generic.IEqualityComparer`1[TKey]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Linq.ILookup`2[TKey,TElement]
    System.Collections.Generic.IEnumerable`1[System.Linq.IGrouping`2[TKey,TElement]]
    System.Collections.IEnumerable
  Properties:
    Int32 Count 'get ' : 
    System.Collections.Generic.IEnumerable`1[TElement] Item [TKey] 'get ' : 
  Methods:
    get_Count(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_Item(TKey): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Contains(TKey): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Add(IGrouping`2): PrivateScope, Assembly, HideBySig
    GetEnumerator(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Struct System.Linq.Parallel.Pair`2[T,U]: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: T
  Type parameter: U
  :System.ValueType
    Void .ctor(T, U): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    T m_first : Assembly
    U m_second : Assembly
  Properties:
    T First    'get set' : 
    U Second   'get set' : 
  Methods:
    get_First(): PrivateScope, Public, HideBySig, SpecialName
    set_First(T): PrivateScope, Public, HideBySig, SpecialName
    get_Second(): PrivateScope, Public, HideBySig, SpecialName
    set_Second(U): PrivateScope, Public, HideBySig, SpecialName
Class System.Linq.Parallel.PairComparer`2[T,U]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
  Type parameter: U
    Void .ctor(System.Collections.Generic.IComparer`1[T], System.Collections.Generic.IComparer`1[U]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IComparer`1[System.Linq.Parallel.Pair`2[T,U]]
  Methods:
    Compare(Pair`2, Pair`2): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.ReverseComparer`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Collections.Generic.IComparer`1[T]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IComparer`1[T]
  Methods:
    Compare(T, T): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.Parallel.Set`1[TElement]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TElement
    Void .ctor(): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEqualityComparer`1[TElement]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Methods:
    Add(TElement): PrivateScope, Assembly, HideBySig
    Contains(TElement): PrivateScope, Assembly, HideBySig
    Remove(TElement): PrivateScope, Assembly, HideBySig
    Find(TElement, Boolean): PrivateScope, Assembly, HideBySig
Struct System.Linq.Parallel.Set`1+Slot[TElement]: AutoLayout, AnsiClass, Class, NestedAssembly, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: TElement
  :System.ValueType
  Fields:
    Int32 hashCode : Assembly
    TElement value : Assembly
    Int32 next : Assembly
Class System.Linq.Parallel.Shared`1[T]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: T
    Void .ctor(T): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    T Value : Assembly
Class System.Linq.Parallel.SortHelper`1[TInputOutput]: AutoLayout, AnsiClass, Class, Abstract, BeforeFieldInit
  Type parameter: TInputOutput
  Methods:
    Sort(): PrivateScope, Assembly, Virtual, HideBySig, VtableLayoutMask, CheckAccessOnOverride, Abstract
Class System.Linq.Parallel.SortHelper`2[TInputOutput,TKey]: AutoLayout, AnsiClass, Class, BeforeFieldInit
  Type parameter: TInputOutput
  Type parameter: TKey
  :System.Linq.Parallel.SortHelper`1[TInputOutput]
  Interfaces:
    System.IDisposable
  Methods:
    GenerateSortHelpers(PartitionedStream`2, QueryTaskGroupState): PrivateScope, Assembly, Static, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    Sort(): PrivateScope, Assembly, Virtual, HideBySig, CheckAccessOnOverride
Class System.Linq.Parallel.TraceHelpers: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    SetVerbose(): PrivateScope, Assembly, Static, HideBySig
    TraceInfo(String, Object[]): PrivateScope, Assembly, Static, HideBySig
    TraceWarning(String, Object[]): PrivateScope, Assembly, Static, HideBySig
    TraceError(String, Object[]): PrivateScope, Assembly, Static, HideBySig
    NotYetImplemented(): PrivateScope, Assembly, Static, HideBySig
    NotYetImplemented(String): PrivateScope, Assembly, Static, HideBySig
    NotYetImplemented(Boolean, String): PrivateScope, Assembly, Static, HideBySig
Class System.Linq.Parallel.Util: AutoLayout, AnsiClass, Class, Abstract, Sealed, BeforeFieldInit
  Methods:
    Sign(Int32): PrivateScope, Assembly, Static, HideBySig
    GetDefaultComparer(): PrivateScope, Assembly, Static, HideBySig
Struct System.Linq.Parallel.Wrapper`1[T]: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: T
  :System.ValueType
    Void .ctor(T): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Fields:
    T Value : Assembly
Struct System.Linq.Parallel.WrapperEqualityComparer`1[T]: AutoLayout, AnsiClass, Class, SequentialLayout, Sealed, BeforeFieldInit
  Type parameter: T
  :System.ValueType
    Void .ctor(System.Collections.Generic.IEqualityComparer`1[T]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.Generic.IEqualityComparer`1[System.Linq.Parallel.Wrapper`1[T]]
  Methods:
    Equals(Wrapper`1, Wrapper`1): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
    GetHashCode(Wrapper`1): PrivateScope, Public, Final, Virtual, HideBySig, VtableLayoutMask
Class System.Linq.OrderedParallelQuery`1[TSource]: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Type parameter: TSource
  :System.Linq.ParallelQuery`1[TSource]
    Void .ctor(System.Linq.Parallel.QueryOperator`1[TSource]): PrivateScope, Assembly, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Linq.Parallel.QueryOperator`1[TSource] SortOperator 'get ' : 
    System.Linq.IOrderedEnumerable`1[TSource] OrderedEnumerable 'get ' : 
  Methods:
    get_SortOperator(): PrivateScope, Assembly, HideBySig, SpecialName
    get_OrderedEnumerable(): PrivateScope, Assembly, HideBySig, SpecialName
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
Struct System.Linq.ParallelExecutionMode: AutoLayout, AnsiClass, Class, Public, Sealed
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    System.Linq.ParallelExecutionMode Default = 0 : Public, Static, Literal, HasDefault
    System.Linq.ParallelExecutionMode ForceParallelism = 1 : Public, Static, Literal, HasDefault
Class System.Threading.Tasks.TaskExtensions: AutoLayout, AnsiClass, Class, Public, Abstract, Sealed, BeforeFieldInit
  Methods:
    Unwrap(Task`1): PrivateScope, Public, Static, HideBySig
    Unwrap(Task`1): PrivateScope, Public, Static, HideBySig
